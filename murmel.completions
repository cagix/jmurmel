lambda
quote
cond
labels
dynamic
if
define
defun
defmacro
let
let*
letrec
multiple-value-bind
multiple-value-call
setq
progn
load
require
provide
declaim
optimize
speed

nil
*command-line-argument-list*
car
cdr
cons
eq
1+
1-
sqrt
log
log10
exp
expt
mod
rem
signum
fround
ffloor
fceiling
ftruncate
round
floor
ceiling
truncate
pi
numberp
floatp
integerp
atom
jmethod
jproxy
fatal
internal-time-units-per-second
get-internal-real-time
get-internal-run-time
get-internal-cpu-time
sleep
get-universal-time
get-decoded-time
consp
symbolp
listp
null
assoc
assq
list
list*
append
eql
*features*
values
rplaca
rplacd
macroexpand-1
gensym
trace
untrace
eval
dynamic
apply
format
format-locale
stringp
characterp
char-code
code-char
string=
string->list
list->string
make-bitmap
discard-bitmap
set-pixel
rgb-to-pixel
hsb-to-pixel
move-to
line-to
move-rel
line-rel
make-frame
open-frame
close-frame
reset-frame
clear-frame
repaint-frame
flush-frame
current-frame
push-pos
pop-pos
pen-up
pen-down
color
bgcolor
text
right
left
forward
read
write
writeln
lnwrite
