Erledigt:
==========================================

welches ergebnis liefert lambda mit einer liste als body?
-> sollte ergebnis der letzten form sein

Klasse Builtin statt UnaryOperator<Pair> einfuehren

eq vergleicht identitaet, was macht Lisp? https://stackoverflow.com/questions/547436/whats-the-difference-between-eq-eql-equal-and-equalp-in-common-lisp
-> checken ob das passt, z.b. (eq (cons (quote 1) (quote 2)) (cons (quote 1) (quote 2))) ist nicht identisch aber gleich (?)
-> GNU CLISP v2.49+ liefert NIL

Eine JUnit funktion, die liest alle lisp files aus einem verzeichnis und führt sie aus.
erwartetes Ergebnis bzw. fehlermeldung steht in der datei in einem kommentar drin, z.B.
; result:(1 . 2)
oder
; error-prefix: SyntaxError in line 12:
und ggf.
; output: Hallo Welt

Lambda -> LambdaJ

Vielleicht in printObj umlenken:
(quote t) -> "t"
null -> "nil"

beim scannen zeile und spalte mitzaehlen und in fehlermeldung einbauen

apply fuer lambdas, siehe apply.lisp

verschiedene konstruktoren fuer Pair und ueberladene cons brauchts wahrscheinlich nicht, cons(Object,Object) muesste reichen

builtin write-line
-> common lisp hat das, parameter muss aber ein string sein

Datentyp double, (nicht int) unterstuetzen

eq fuer number korrigieren
-> oder eq lassen und = einfuehren, achtung beim vergleichen von double!
-> vielleicht = mit optionalem drittem double parameter fuzz fuer die genauigkeit

+ - * / %, factorial beispiel

car, cdr umstellen dass sie Object uebernehmen
-> dann gibts einen cast in car/cdr statt 1000 casts ueberall

vielleicht "Object car(Object)" und "Pair pcar(Object)"?
-> Eruebrigt sich ggf. durch Umstellen von car(Pair) nach car(Object) 

die parameterchecks ignorieren zuviele argumente

numberp, ggf. atom korrigieren
symbol? vs atom vs numberp

<, >, usw checken ob Double#compareTo Vorteile bzgl. NaN und +- 0.0 hat, derzeit passiert Unboxing

tests fuer atom, consp, listp, symbolp, numberp

test fuer eval nil und eval t, ggf. symbol t einfuehren

tests und fehlertests fuer number und operatoren

numberp() ggf. teilweise durch atom() ersetzen, dann koennen externe Builtins ihre eigenen Datentypen
in car reinstecken, der Interpreter sieht und verarbeitet nur Object

errortests fuer lambda/ builtin mit zuviel/ zuwenig parametern aufrufen

errortests fuer fehler wie erster parameter fuer lambda ist keine symbolliste

Sollen die interpret...() Methoden einen String oder ein Objekt zurueckgeben?
Vielleicht Object zurueck, und ConsCell bekommt eine toString() Methode basierend auf printObj?

Scanner/Parser in eine Klasse rausziehen, je ein Objekt ProgramParser und InputDataParser,
die Lisp Funktion read verwendet den InputDataParser.
Symboltabelle zu geeigneten Zeitpunkten auf null setzen, wahrscheinlich im Konstruktor der ScannerParserKlasse

if(!strcmp(token, "\'")) return cons(quote, cons(readobj(), nil));

isParen und isQuote nach isSyntax zusammenziehen



Tail recursion erkennen: es wird eine Funktion aufgerufen, die im environment 1 hoeher ist (?)
oder wenigstens loop einbauen
-> einfacher ists alle tailcalls zu optimieren

eval hat einige endrekursive aufrufe. koennte man eliminieren.
vielleicht noch einen zweiten levelzaehler einfuehren, dann kann man den level fuer eval und (kleinere) rekursionstiefe anzeigen

eigentlich passiert die rekursion ja in eval:
evlis, evcon & co inline expandieren, und das letzte listenelement nicht mit rekursion aufrufen sondern
manuell tail recursion elimination machen.

PROBLEM: function calls haben ein geaendertes environment extenv
-> einen stack aus extenvs aufbauen: ein int "stackarray" in dem merkt man sich, wieviele elemente vorne
drangepickt wurden und nach verarbeiten des calls entfernt werden müssen 

dann werden nicht nur tail rekursionen wegoptimiert, sondern alle tail calls. es ruft zwar die eine Lisp funktion
eine andere auf, aber in wirklichkeit laeuft nur der code der einzigen Java-methode eval. 



eval, evlis, evcon vielleicht in haendischem CPS?!?
-> eruebrigt sich durch TCO

Erkennung von zirkulaeren Listen koennte man in printObj einbauen
-> aber ohne set gibts derzeit eh keine zirkulaeren Listen ?!?)
-> contains self aber schon

printObj auf loop umbauen, "sich selbst enthalten erkennen", vgl collection.toString()

"t" aus/ einschaltbar machen: flag "HAVE_TRUE"
-> falls true  -> t in der symbol table und _expTrue = t
-> falls false -> t nicht in der symbol table und _expTrue = (quote t)

Numbersupport mit flags ausschalten?
Optional BigDecimal statt Double?

fnull, fcons usw brauchen keine members zu sein, koennten lokale variablen in environment() sein
-> vorher environment() aufteilen?

der Double Support ist eigentlich nur mittels Builtins umgesetzt
-> in ein eigenes ExtEnv verpacken, damit kann mans optional machen,
   oder alternativ/ zusaetzlich z.B. BigDecimal unterstuetzen
-> UND im Lexer gibts Support fuer Double

--help

Datentyp Strings unterstuetzen
-> laenger als SYMBOL_MAX=32

Strings und Characters braucht eigentlich nur der Scanner, Parser (readObj) und Builtin Funktionen (inkl printObj!!!) kennen.
Strings, Chars und Symbols sind alles Atoms, aber nur Symbols sind in der Symboltable

Parser refactoren:
LispParser bekommt statt InputStream einen IntProducer:
fuer InputStream in:
    () -> in::read
oder fuer StringReader s:
    () ->  s::read

readObj umbauen dass (a . b) eingelesen werden kann?

Builtins sollten ggf. expression mitbekommen fuer ausgabe von fehlermeldungen

printObj sollte symbols mit syntax als |xxx| printen. Was syntax characters sind, weiss nur der Parser
-> printObj als Methode von Parser, naechsten punkt umsetzen!

Builtins sollten ggf. parser (symboltabelle) und ggf. environment mitbekommen, dann koennten sie static sein,
waer ggf. besser fuer custom builtins
-> builtins mit env koennten late binding machen
-> builtins muessen printObj des parsers verwenden
-> environment() koennte static sein

!!!!!!! Alles falsch: Syntax characters bestimmt der ObjectWriter.
Builtins sollten Symboltabelle, ObjectReader in, ObjectWriter out, ggf. Tracer, ggf. Environment bekommen

write sollte ObjectWriter.printObj() verwenden,
zum Tracen weiterhin das statische printObj verwenden
-> LispParser (eigentlich ObjectWriter, s.u.) bekommt methode printObj, bisherige statische Methode printObj in traceObj umbenennen oder printSExpression 
-> write schreibt im gewuenschten Format, Errormessages sind im Format S-expression
-> Syntax characters von S-expressions als static Konstante von LambdaJ rausziehen,
   dann kanns Lispparser und das statische printObj verwenden



getrennter Reader fuer read
-> Object interpret(Supplier lispSource, Supplier lispStdin, Consumer lispStdout, Supplier<ConsCell> customEnvironment)
-> oder LambdaJ in Builder Pattern umbauen:

interface ObjectReader { Object readObj(); }
interface SymbolTable { String intern(); }
interface Parser extends ObjectReader, SymbolTable

interface ObjectWriter { String printObj(Object o, boolean headOfList, boolean eol); }
class LispParser implements Parser, ObjectWriter

interface Tracer { void println(String); }

FFI: eine special form "extlabels". funktioniert aehnlich wie labels,
aber statt funktionsdefinitionen gibt man einen Klassennamen an (und vielleicht ein zusaetzliches optionales namenspraefix,
damit man im falle von gleichnamige methoden in zwei klassen "namespaces" zum trennen verwenden kann), und
von dieser klasse werden alle public methoden mit der Signatur UnaryOperator<Pair> ins Environment gesteckt.
Oder statt reflection: "extlabels" bekommt den Namen einer statischen methode die liefert eine Map Funktionsname->UnaryOperator<Pair>

Oder: LambdaJ bekommt eine Methode void registerBuiltin(String funcName, Builtin javaFunc), die pickt eine neue
Funktion ans Environment vorne dran.
Oder: zus. Parameter ConsCell extEnv, damit kann man eine Liste mit zusaetzlichen Builtins mitgeben



primitive string-format-localized: erster parameter ist locale, z.B.
(format-string-localized "en-US" "%g" 1)

evlis/ evcond sollten auch was tracen. stackanzeige erhoehen, evallevel nicht
einrueckung basiert auf javastackzaehler, anzahl sterndaln evallevel - javastackzaehler

apply erlaubt nur 2 argumente, sollte aber 2+ akzeptieren (und gegen parameterliste checken?)
siehe apply3.lisp
laut http://www.n-a-n-o.com/lisp/cmucl-tutorials/LISP-tutorial-20.html:
(apply #'+ 3 4 '(3 4))
Apply is just like funcall, except that its final argument should be a list; the elements of that list are treated
as if they were additional arguments to a funcall.
-> apply ist komplett hinueber

(write " ") schreibt " " inkusive der double quotes
-> vielleicht write-string und write-line

Escapig von " ", ', \ ...
SExpWriter sollte so schreiben wie SExpReader liest, d.h. mit escaping
ConsCell.toString() sollte nicht escapen
gelesen wird ein Symbol he\(lo, geschrieben wird |he(lo|

Wenn eine Funktion labels oder cond enthaelt, werden tailcalls effektiv nicht wegoptimiert, weil evlabels bzw. evcond
auf den Java stack kommt. "if" ist in eval inline drin, deswegen funktioniert TCO trotz "if".

environment umsortieren

eval braucht keine elsif Kette sein: in jedem if gibts return oder continue

applyPrimitive (2x) in eval in ein try/catch wrappen, im catch:
throw new LambdaJError(e.getMessage + expError(exp))
-> damit sieht man in welcher expression z.B. argumente nicht passen

evlabels inlinen und TCO

performance: benchmarken
warum ist das environment eine liste von listen statt eine liste von cons cells

am ende wird stack und nesting getraced falls TRC_EVAL.
-> TRC_STATS statt TRC_EVAL, zusaetzlich walltime, cpu und anzahl ConsCells tracen.

in dbeval die groesse des environment ausgeben. wahrscheinlich waechst das bei rekursion. 

statt dbgEval -> if (trace >= TRC_EVAL) dbgEval
und die if clause aus dbgEval weg

ggf mit :init altes environment vergessen

im main loop: parsen und checken, ob obj.toString = :w oder = :q ist, so koennte man befehle für den REPL ausserhalb Lisp einbauen

lexikalische closures

lexical closures muessten gehen, indem man das env mit dem lambda mitspeichert und beim aufruf des lambda 
nicht das aktuelle env extended sondern das abgespeicherte
-> umsetzen, indem "lambda" nicht ein lambda ins environment steckt sondern "closure" 
   (oder doch ein lambda und die liste enthaelt nicht nur ("lambda" args body) 
   sondern ("lambda" args body closure), mit nullcheck entscheiden, 
   ob lambda oder closure ausgefuehrt wird. und eval() erweitern, dass closure wie lambda verarbeitet wird, 
   aber statt aktuellem env die closure mit args erweitert
-> mit befehlszeilen parameter --dyn umstellen

labels gehen mit lex clos nicht: im closure sind die labels nicht drin

trace auf final int trace umstellen und im Konstruktor belegen

pfx() und sfx() zusammenziehen, werden immer gemeinsam aufgerufen

' ist wsl falsch: sollte alles rekursiv quoten, derzeit machts nur ein einziges (quote...
-> eher ist apply falsch

der code von apply und functioncall ist fast identisch:
-> makeArgs umbauen, dass kein eval gemacht wird
-> apply macht die args mit eval, functioncall mit evlis
-> mit einigen weiteren umbauten kann functioncall nach apply springen
---> oder beide setzen ein neues 

"enter an expression, enter :h for command help or :q to exit"

defun einbauen, weil define alleine ist muehsam
oder doch defun als macro und macros unterstuetzen?
(defmacro defun (sym params body) (define sym (lambda params body)))

statt Xmal boolean HAVE_xxx
-> ein final int features das im Konstruktor von LambdaJ belegt wird
   static final int HAVE_XXX = 1 << 1,2,3,4...
   methoden boolean haveXXX()
   -> den wert fuer features muss man vorher mit | zusammenbasteln
      zur laufzeit sollten die haveXXX methoden (fast) wegoptimiert werden, wenn features final ist

Bespiel Parser liest serialisierte Objekte, intern ist String.intern()

checken ob die string funktionen geeignet ein/ausgeblendet werden

interpreter bekommt eine methode init()
interpret() überladen das kein neuer parser uebergeben wird. damit kann man immer wieder interpret() aufrufen und defines bleiben bestehen

die sSymbol.get() gschichte ist total overengineered, besser das lazy loading ganz weglassen (ausser vielleicht bei exptrue lassen)

ConsCell hat 4 byte platz wg alignment. man koennte ein int mit typ machen statt LambdaJString und instanceof.
CONS=0 PRIM = 1 LAMBDA=2 CLOSURE=3 ATOM=10 SYMBOL=10 STRING=11 CHAR=12 DOUBLE=12
isAtom() { return typ >= ATOM }, dann koennte custom code seine eigenen typen erfinden.
solange die neuen typnummern >= ATOM sind, sieht der interpreter alles als atom
-> geht doch nicht so: das flag wird nicht bei ConsCell gebraucht, sondern bei den values, die als Object car oder cdr gespeichert sind
-> fuer closure genutzt


primitives format und format-locale: erstes bzw. zwei erste args sind strings, schreiben nach lispStdout

        ThreadMXBean threadBean = null;
        long startCpu = 0L;
        long start = 0L;

            threadBean = ManagementFactory.getThreadMXBean();

            if (threadBean != null) {
                startCpu = threadBean.getCurrentThreadCpuTime();
            }
            start = System.nanoTime();

Variable INTERNAL-TIME-UNITS-PER-SECOND
Builtins GET-INTERNAL-REAL-TIME, GET-INTERNAL-RUN-TIME, SLEEP

define/defun

nil in der symboltabelle als Java null ist fishy, weil symbol nil == null false ergibt
deswegen ist auch der hack in eval bei funktionsaufruf notwendig
-> vielleicht reichts doch, im parser umzulegen? aber was ist im modus ohne nil, aber vielleicht ists dann eh kp

bei cond wird nur das erste stmt ausgefuehrt

LambdaJError(String, Object...) + ggf. Stringkonstanten am anfang der Klasse

in setsymtab nur die symbole erstellen, dies laut features geben soll (if have...)

nCells nicht static, statt im Konstruktor in cons und cons3 schreiben

File mit einigen Expressions als sample session herrichten, sample session mit
  java -jar lambdaj.jar < sample-session.lisp > transcript.txt
erzeugen.
-> flag --prompt einbauen, default fuer tty = true, !tty = false
-> eine sample session mit allen sprachmitteln und kommentaren koennte ein ausfuehrbares reference manual sein
-> aber nur, wenn jede eingelesene zeile auch auf den schirm zurueckgeschrieben wird
   -> parameter --echo und --no-echo
   -> echo koennte umgesetzt werden, indem main SExpressionReader ein Lambda uebergibt, das nicht nur liest sondern ggf. alles
      gelesene auch schreibt
   -> --prompt koennte umgesetzt werden, indem main nicht direkt nach stdout schreibt sondern in ein lambda, das schreibt oder nicht
      oder entweder nach --prompt: (s-> System.out.print) oder --no-prompt: (s-> return)

dotted lists werden entweder nicht richtig glesen oder geschrieben
soll:
'(a . b)              ; (A . B)
'(a . (b . (c . d)))  ; (A B C . D)
'(a b c . d)          ; pprint: (A B C . D)
'(a . (b . (c . ()))) ; (A B C)
'(a b c)              ; (A B C)

LambdaJ ist fast ein Subset von CL, Unterschiede zu CL dokumentieren, am besten ein kurzes Manual mit allen Sprachmitteln
und ggf. Unterschieden
oder ein builtin "help": (help) listet alle special forms und builtins nach lispStdout, (help symbol) schreibt eine Beschreibung
zu "symbol" nach stdout

im repl wird zeile/char immer weitergezaehlt

writeln umbauen auf "\n<string> "
-> mit param
--eol=LISP
--eol=C

http://www.lispworks.com/documentation/HyperSpec/Body/f_get_un.htm
get-universal-time <no arguments> => sekunden seit 1.1.1900
get-decoded-time <no arguments> => second, minute, hour, date, month, year, day, daylight-p, zone

progn fuer if und anderes?
-> nach schema lambda und fallthrough. in zip() shortcut einbauen: if paramlist == null && arglist == null return

vielleicht doch ein let? das waer ein lambda, das die uebergebene funktion in ein lambda mit den werten verpackt
  oder eine special form die nur das environment erweitert und dann "env=extenv; continue;"
-> let muss eine fexpr sein, special form oder macro, oder doch nicht? ja, sonst wuerden die variablenlisten ausgefuehrt
-> oder define setzt werte im aktuellen env
-> nur letrec als special form. letrec ist die obermenge von let und let*

letrec so wie labels umbauen, dass allfaellige closures alles andere sehen, nicht nur die vorher deklarierten

let*

named let* und letrec
named let: gibt dem body einen namen, damit er sich rekursiv aufrufen kann. waer leicht moeglich, das in letrec einzubauen (if symbolp(car(arguments)))
(define (number->list n)
  (let loop ((n n)
             (acc '()))
    (if (< n 10)
        (cons n acc)
        (loop (quotient n 10)
              (cons (remainder n 10) acc)))))

muss man bei named let immer alle parameter befuellen?
-> in scheme ja

-> number operatoren auf long erweitern
   div: integer division, rem: rest
   numberp erweitern
   floor, ceil und round

printSEx umbauen, dass es statt stringbuilder einen Consumer<String> uebernimmt, zum schreiben in file

eval wird IMMER mit stack+1/level+1 aufgerufen
-> +1 bei den aufrufen weg, am anfang von eval machen

define und defun sollten ggf das symbol liefern

eval ins environment einhaengen?
-> The main reason for beginners is: you don't need it. https://stackoverflow.com/questions/2571401/why-exactly-is-eval-evil

environment erweitern: statt cons(null, null) -> extenv = append(obj, extenv)

try/ catch für javacode in eval statt in d, weil da kann man in der Fehlermeldung die Expression ausgeben

statt der for (list) schleifen den iterator benutzen, sollte dotted list und circular handeln

der Parser koennte integer auch parsen, ggf. auch char, long, biginteger, bigdecimal mit irgendeinem praefix gekennzeichnet. 
sind alle Number, k.a. ob das beim erweitern der operatoren was bringt
-> in den Operatoren ((Number)x).doubleValue zum Rechnen, ergebnis muss dann ggf. auf den richtigen typ gebracht werden
   / ergibt immer double, bei *+/mod haengt der ergebnistyp von den eingehenden typen ab
-> dann bräuchte man wohl auch typumwandelfunctionen, sonst stellts string-format auf, wenn man nicht mehr weiss was man hat

Long im parser unterstuetzen
-> parser geht, cmdline switches + dok fehlen
statt double number dreht double und long auf/ ab, no long dreht ggf. long ab

topEnv kann ein member sein, nicht immer rumreichen, stack detto, mit bisserl aufwand auch level
-> stack und level bleiben params, das sind eigenschaften der methode eval

http://www.lispworks.com/documentation/HyperSpec/Body/f_dec_un.htm
decode-universal-time universal-time &optional time-zone => second, minute, hour, date, month, year, day, daylight-p, zone

FFI: methoden
Object getValue(String globalSymbol)
Object apply(String func, Object... args)

und/ oder

interface MurmelFunction { Object apply(Object... args); }
MurmelFunction getFunction(String func) {...}
Object         getValue(String globalSymbol)

Java FFI:
JSR-223 (Java scripting API)

https://stackoverflow.com/questions/46611132/how-i-merge-lisp-and-java-or-how-i-run-lisp-code-using-java
Interpreter interpreter = Interpreter.createInstance();
interpreter.eval("(load \"my-lisp-code.lisp\")");

Symbol myFunctionSym =
          defaultPackage.findAccessibleSymbol(
               "MY-FUNCTION");
     Function myFunction =
          myFunctionSym.getSymbolFunction();
Cons list = 
          (Cons) myFunction.execute(
                        Fixnum.getInstance(64),
                        Fixnum.getInstance(64));

trace und features in 2 methoden rausziehen

(cons 'a . 'A) -> (a . a)
-> dokumentiert, kein wirkliches problem, nur kosmetische eher positive auswirkung

buitlin apply-java: erster parameter ist ein string statt symbol, d.h. die expression fuer das erste argument muss einen String liefern,
das ist dann der Name einer Klasse und/ oder statischen Methode. Ggf. auch eine statische Methode,
die ein Function<ConsCell,Object> Javalambda liefert.

Vielleicht operator # fuer Javacalls? # wie in javadoc, oder :: wie in methodenreferenzen (waer cooler, moderner)
-> # hat in CL schon eine Bedeutung, z.B. #\C

(define my-map (:: new java.util.HashMap nil))
(:: "put" "java.util.HashMap" my-map "my key" "my value")
(:: "format" "java.lang.String" nil "%g" 1.0)
erster parameter methodenname, zweiter klassenname, dritter objektreferenz oder nil fuer statische methoden, der rest sind parameter fuer die methode
primitive :: koennte durch eine klasse mit methodencache implementiert werden

oder :: erzeugt ein Primitive-Objekt, das Klasse, und Methode enthaelt und spaeter wie eine normale Lisp Funktion aufgerufen
werden kann (aehnlich wie lambda ein closure erzeugt):
(define make-java-map (:: "new" "java.util.HashMap"))
(define java-put-hash (:: "put" "java.util.HashMap")

(define my-map (make-java-map nil))
(java-put-hash my-map "my key" "my value") ; erstes Argument beim Aufruf von "Java-Methoden" ist immer das Java-Objekt, ggf. nil fuer statische Methoden

symbol vielleicht nicht als String sondern class LambdaJSymbol { char[] symname; }, dafuer LambdaJString weg -> stattdessen java.lang.String
-> murmel muss sonst Java string argumente mit symbol abfuellen und Java return String liefert ein symbol (das es nicht gibt)
-> spart eher speicher

parameterchecks fuer letrec

LambdaJ gibts schon. Ausserdem gibts:
JavaLISP, http://jlambda.com, jlisp, rlisp, ROMALISP
-> umbenamsen:
   Murmel: ich mag das tier, murmeln <->-lispeln, Sprache: Murmel, interpreter: jmurmel
   JUCL: Java Un Common Lisp, uncommon Lisp klingt negativ

Vielleicht doch die Zeilennummer in ConsCell speichern fuer Fehlerausgabe?
vielleicht ein --debug flag, dann allokiert der parser andere ConsCells mit zeilennummern?
und printSEx bekommt einen parameter "lines" damit errorexp objekte mit zeilennummern ausgibt
oder LambdaJError bekommt einen zusaetzlichen parameter errorExp und gibt die errorExp aus mit oder ohne zeilennummern
-> ConsCells mit zeilennummern koennte der parser eigentlich immer erzeugen, code gibts nicht so viel, und die daten
   werden dadurch nicht vergroessert

scanner sollte | fuer symbole koennen
oder keine | schreiben
-> "print-read consistency" (a term given in ANSI CL, 2.3.6, in the context of symbols and packages),
   which refers to the concept of objects being printed in a machine-readable way, so that when the
   printed representation is scanned by the reader, a similar object is produced.

die primitive "list" ist trivial: einfach das argument liefern, das ist die variable "arguments" in eval, und das ist bereits genau
die gewuenschte liste

wenn formale parameter eine dotted list sind, wird auf den letzten parameter eine (moeglicherweise leere) liste mit den restlichen argumenten gebunden
-> variadic function mit zumindest einem parameter, scheme machts so
-> checken was passiert, wenn statt einer parameterliste nur ein symbol steht. das koennte dann eine variadic function sein die 0 oder mehrere args schluckt:
   alle argumente werden in eine (ggf leere) liste verpackt und an das einzige parameter symbol gebunden

define hat varargs, defun nicht


statt intern(new LambdaJSymbol... -> genSym(String...
-> das checkt unique symbols und reserved keywords

reserved words einbauen: vgl. Evolution of Lisp, pp 62 ff
-> NIL may not be used as a function, nor as a variable
-> T may not be used as a variable.

redefinieren der symbole von special forms verbieten? auswirkung hats eh keine.
->
special forms werden nicht im environment gesucht, die verarbeitung ist hardcodiert
die auswirkung davon laesst sich durch folgendes symptom beschreiben:
effektiv sind die symbole von special forms in einem eigenen namespace wo operatoren zuerst gesucht werden
(define eval 1) -> eval
(eval eval) -> 1
(eval 'eval) -> 1
vielleicht zumindest insofern reparieren, dass fuer die keywords symbole angelegt werden, dann gibt define einen fehler
und es gibt keine sonstigen auswirkungen mehr
-> aber let & co lassen das redefinieren trotzdem zu

ueberlegen, was special form und was primitive ist und was in der reserved word liste landet
-> primitives sind symbols im global env, die koennte man in lambda params und let bindings benutzen
   special forms funktionieren nicht als let bindings und muessen in die liste
   sprachelemente wie eq, cons, car, cdr koennte man als primitive umsetzen, oder aus performancegruenden als special form
   -> notwendige special forms plus "wichtige" primitives in die liste plus t und nil

vielleicht doch ein sprachmittel um gezielt dyn od lex closures zu erzeugen
-> vielleicht mit self evaluating symbol dynamic (self evaluating weil dann kann man quote oder nicht, ist egal)

tests fuer dynamic lambda

tests fuer lambda mit mehreren stmts
-> dynamic_lambda.lisp

vielleicht die feature flags nur im repl, sonst file variablen
-> file variablen als kommentare vor anderen syntaxzeichen, gleich im kommentarloop im scanner auswerten, der setzt featureflags
   beim setInput() die featureflags wieder zuruecksetzen
zumindest --lex ausbauen und --dyn -> --X-dyn mit warning (nicht mehr Murmel, auch kein subset)
vielleicht alle sprachflags -X-... und --dyn-> -XX-dyn

dzt gibts let* und letrec
-> let dazu, damit in den binding forms das umschliessende environment inkl globals garantiert sichtbar ist
   braucht man zum macros programmieren
-> was ist letrec*

soll bei named letXX das let-symbol in den bindings sichtbar sein?
-> CL hat kein named let
   scheme hat nur named let, kein named let* letrec, body symbol ist in den binding expressions unbound
    -> rausfinden was die nachteile von named let* und letrec sind
    -> rausfinden was die nachteile von named binding in binding expressions sind 


https://docs.racket-lang.org/reference/let.html
https://groups.csail.mit.edu/mac/ftpdir/scheme-7.4/doc-html/scheme_3.html#SEC31

LET: Lisp, Scheme, Racket   Murmel hats nicht
(let ((symbol form)...) bodyform...) -> object
* form sieht nur umschliessendes environment
* bodyform sieht umschliessendes environment und symbols

(let ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
((lambda (s1 s2 s3) bodyform)
  (eval form1)
  (eval form2)
  (eval form3))


NAMED LET: Scheme, Racket      Murmel hats nicht
(let bodysymbol ((symbol form)...) (bodyform)...) -> object
* symbols muessen unique sein
* form sieht nur umschliessendes environment
* body sieht umschliessendes environment, symbols und bodysymbol


LET*: Scheme, Racket       Murmel hats korrekt und zus NAMED LET*
(let* ((symbol form)...) (bodyform)...) -> object
* the symbols need not be distinct; later bindings shadow earlier bindings.
* form sieht umschliessendes environment und vorangegangene symbols (definiert)
* body sieht umschliessendes environment und symbols

(let* ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
(let ((s1 form1))
  (let ((s2 form))
    (let ((s3 form3))
       bodyform)))
->
((lambda (s1)
      ((lambda (s2)
            ((lambda (s3)
                  bodyform)
                (eval form3)))
          (eval form2)))
    (eval form1))


(letrec ((symbol form)...) (bodyform)...) -> object
* form sieht umschliessendes environment und alle symbols (undefiniert)
* body sieht umschliessendes environment und symbols

(letrec ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
(let ((s1 *undefined*) (s2 *undefined*) (s3 *undefined*))
  (let ((_x_ (eval form1)) (_y_ (eval form1)) (_z_ (eval form1)))   ; unique identifiers
    (set! s1 _x_)
    (set! s2 _y_)
    (set! s3 _z_)
    bodyform))


Racket letrec == Scheme letrec*
(letrec* ((symbol form)...) (bodyform)...) -> object
* The ids must be distinct according to bound-identifier=?.
* form sieht umschliessendes environment und alle symbols (vorangegangene definiert, eigens und folgende undefiniert)
* body sieht umschliessendes environment und symbols

(letrec* ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
(let ((s1 *undefined*) (s2 *undefined*) (s3 *undefined*))
  (set! s1 (eval form1))
  (set! s1 (eval form1))
  (set! s3 (eval form1))
  bodyform)


-> am besten:
   named letX bleibt weil let loop
   let dazu
   let* bleibt
   letrec* ist anders als scheme: in scheme sehen die let forms alles als bound aber folgende als undefined


dynamic dokumentieren

Unterscheiden: Symbol gibts nicht vs. hat keinen Wert zugewiesen: not bound vs. undefined
-> besseres wording: bound/not bound, defined/bound but not defined
-> spielt eigentlich bisher nur bei letrec eine Rolle
   special forms boundp und definedp, spezialwert "Object undef" einfuehren und in symbol lookup auswerten

statt reserved=cons(symbol, reserved)
-> reserved(Symbol)

primitives nach haeufigkeit umsortieren

These are your father's parentheses
Elegant weapons
for a more... civilized age.

in readme.md nur einfache beispiele, rest in features.md und verweis auf langref

format und string-format zusammenziehen:
-> format t <string> schreibt auf stdout, return wert ist <string>
-> format nil <string> schreibt NICHT auf stdout, return wert ist <string>
-> format-locale und string-format-locale detto

string-format und format doch zusammenziehen:
(format nil "~A, ~A!" "Hello" "world")   ; => "Hello, world!"    schreibt nix, liefert den string
(format t "~A, ~A!" "Hello" "world")     ; => NIL                schreibt nach stdout und liefert nil

behandlung von nil beschreiben (Lisp <> Scheme)

alles geparste in main merken, und mit :w in eine datei schreiben und/ oder zumindest mit :l auflisten
weitere debug gschichten wie zb :env fuer environment auflisten
-> Scala: https://learnxinyminutes.com/docs/scala/
// REPL sessions can be saved
scala> :save /sites/repl-test.scala


javax.tools.JavaCompiler comp = javax.tools.ToolProvider.getSystemJavaCompiler();
CompilationTask c = comp.getTask(null,null, null, null, null, Collections.singletonList(new JavaSourceFromString(..., "class...");
Boolean success = c.call();

in ein jar reinkompilieren:
void compileWithJSR199() throws IOException {
    String cpath = "C2.jar";
    File clientJarFile = new File(cpath);
    File sourceFileToCompile = new File("C3.java");


    javax.tools.JavaCompiler javac = ToolProvider.getSystemJavaCompiler();
    DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();
    StandardJavaFileManager stdFileManager = javac.getStandardFileManager(diagnostics, null, null);

    List<File> files = new ArrayList<>();
    files.add(clientJarFile);

    stdFileManager.setLocation(StandardLocation.CLASS_PATH, files);

    Iterable<? extends JavaFileObject> sourceFiles = stdFileManager.getJavaFileObjects(sourceFileToCompile);

    if (!javac.getTask(null, stdFileManager, diagnostics, null, null, sourceFiles).call()) {
        throw new AssertionError("compilation failed");
    }
}
-> geht so nicht, jar muss man selber zsammpacken

generierte klassen in ein jar zsammpacken: https://stackoverflow.com/questions/1281229/how-to-use-jaroutputstream-to-create-a-jar-file

sind NACH dem let die let variablen wieder weg? sollte so sein -> test schreiben
-> falls nicht: waere durch naechsten punkt erledigt

der interpreter sollte haveNumbers haben, der scanner haveDouble und haveLong
-> enumwert HAVE_NUMBERS zusaetzlich, have methoden geeignet verteilen

closures NICHT dynamisches global env
-> ist doch kein problem, interpretiert gehts, und kompiliert: zur runtime sind die globals eh alle da

subOp auf asDouble umstellen

:java sollte filename aus classname ableiten . -> /

asDouble sollte ggf. eine function dbl() aufrufen statt so viel inline
main von MurmelProgram refaktorn: main(new Test())
compareOp auf interpreter angleichen


script fuer den aufruf
-> default parameter
-> files oeffnen und dann von console lesen

defun kompilieren

statt --compile -> --to-java und --to-jar

:run braucht eigentlich keinen Parameter
-> :r

ArraySlice sollte von ConsCell erben, wg. FFI (funktion gibt ArraySlice zurueck)
ConsCell.car/cdr sollten nicht public sein, nur getter
-> car/cdr aus ConsCell weg, damit Vererbung auf ArraySlice passt
-> vielleicht iwie Sequence in die Hierarchie reinbringen?

CL hat die funktion null, Murmel hat not
-> doch wieder umbenamsen, null ist viel haeufiger sprechend als not

Parser Interface refactoren: aufteilen in FormProducer und Symboltable
-> compiler- und interpreter-methoden koennen entweder einen Parser oder symtab/formproducer uebernehmen
-> gibt aber eh schon ObjectReader und symboltable, muss man nur nutzen

Zeilennummern in die kommentare mit rein. was ist eigentliche das problem mit der zeilennummer des beginns einer form? auch fuer "missing ) started at..."

Anatomy of LISP hat einen reader ohne rekursion

der compiler soll generell '\n' schreiben, derzeit ists eine mischung

LispPrinter soll linesep in strings umsetzen, ggf. waehlbar, falls waehlbar -> dokumentieren

REPL muss teilw. noch linesep umsetzen

compiler varargs geht wsl nicht

erforschen, was der zeichensatz beim lesen und schreiben ist, und dokumentieren, moeglichst Java standard verwenden
-> in System.initializeSystemClass() werden die Properties line.separator, sun.stdout.encoding und sun.stderr.encoding ausgewertet
   -> System.out und err schreiben Strings und chars anhand dieser properties, output muesste also passen
-> gelesen wird von stdin byte fuer byte (bytes werden als int geliefert), bytes werden auf char gecastet, char ist unicode
   -> umstellen dass gelesene bytes in ein byte array gespeichert werden,
      und tokenToString wandelt dieses bytearray anschliessend mittels new String(b, Charset.getDefault())
      Charset.getDefault liefert das Charset aus property file.encoding

SExpReader liest bytes, das funktioniert so nicht mit StringReader(der liefert nicht bytes sondern unicode chars als ints)
-> umstellen auf new ByteArrayInputStream(StandardCharsets.UTF_8, "...")

charset als param fuer den scanner (null ist java default), programmcode sollte immer als utf-8 gelesen werden
-> param "charset" einbauen und bei Parsern auf utf8 setzen (StandardCharsets.UTF_8)
    -> ausser im REPL, weil dort kommt der Programmcode von der Konsole

AnyToUnixEol an diversen Stellen einhaengen, derzeit liest nur repl() richtig

nur im Repl den gleichen Parser fuer program und read verwenden, sonst getrennte mit passender EOL konvertierung und charset

bytes mit charsetdecoder nach strings wandeln, mit CodingErrorAction.REPORT erzeugt unlesbarer input eine exception:
https://www.baeldung.com/java-char-encoding

der compiler erzeugt einen (unicode-) string, der wird in ein file mit Charset.getDefault() geschrieben
-> in ein UTF-8 file schreiben
-> oder: compilexx returned einen string. koennte stattdessen einen writer uebernehmen

JSR223: evalScript will fuer den Code einen bytereader, bekommt von JMurmelScriptEngine aber Reader::read (das liefert nicht UTF-8 bytes)
StringReader::read liefert anscheinend bytes entsprechend file.encoding ?!?
-> es braucht wohl einen zus. SExpressionParser der java.io.Reader liest oder einen ReadSupplier der char liefert
-> ausserdem sollte LispReader fuer JSR233 Programme von einem Reader lesen, nicht bytes als file.encoding interpretieren

der reader zaehlt bytes fuer charpos, umlaute sind 2 bytes, deswegen stimmt charpos bei umlauten nicht
-> eigentlich sollten die ObjectReader alle char liefern, und SExpressionParser.token ist ein char array
-> ggf. zus. Konstruktor, der einen Java.io.Reader uebernimmt

fehlende schliessende klammer wird IMMER mit der letzten zeile gemeldet
-> oeffnende Zeile merken und ausgeben

files von der befehlszeile sind im environment des repl aber nicht in der history
-> man kanns zwar interpretieren, aber nicht kompilieren/ mit :run kompilieren und laufen lassen/ mit :l listen

kompilierte jars spucken das letzte result aus, wenns ungleich null ist
der interpreter (file an der befehlszeile) nur mit --result
-> interpreter sollte sich ohne --result so verhalten wie jars, und mit --result ergebnisse aller toplevel forms ausspucken

die konstanten fuer symbolnamen von murmelprogram nach compiler
-> doch nicht damits ein MurmelJavaProgram.getValue() geben kann

der compiler braucht forward deklarationen, der interpreter nicht

die basisklasse MurmelJavaProgram sollte besser MurmelRuntime heissen
-> im Code und in den Strings umbenamsen
-> doch nicht

das generierte getValue() sollte im default ein neues MurmelProgram.getValue aufrufen, das alle vordefinierten globals und primitives liefert
-> stattdessen enthaelt getValue() ein zweites switch mit builtins

(let ((nil 42)) nil)   sollte eig wg reserved word nicht gehen, geht aber in interpreter und compiler
(let ((t 42)) t)       sollte eig wg reserved word nicht gehen, geht aber im compiler
(let ((cons 42)) cons) geht, sollte das einen fehler wg. reserved geben?

(define t 42)          sollte eig wg reserved word nicht gehen, geht aber im compiler
(define nil 42)        sollte eig wg reserved word nicht gehen, geht aber im interpreter, NPE im compiler

muss der compiler auch reserved words handeln?
-> ja, s.o.

methode eval sollte eigentlich evalquote heissen

MurmelJavaProgram implements MurmelProgram
-> MurmelProgram verwenden
-> MurmelJavaProgram auf private oder Package umstellen geht nicht weil erzeugte Progamme das extenden

trace und untrace zum "debuggen", vgl. https://github.com/norvig/paip-lisp/blob/master/docs/chapter1.md

in eval eine lokale variable result einfuehren, das wird vor dem return zugewiesen, dann kann finally den returnwert tracen

--java liest nicht von stdin
--trace=stats gibt nur stats der ersten exp aus

der reader gibt einen kommentarblock als gesondertes objekt
-> nein, --trace=stats schreibt auch die initialisierung mit "() -> -1"

--jar packt nur MurmelProgram.class, die lambdas MurmelProgram$1.class usw gehen verschuett

bei get-decoded-time fehlt der wochentag: ... jahr wochentag "Daylight saving time flag" timezone
timezone hat das falsche vorzeichen: oestlich von greenwich ists negativ
timezone ist ein double, sollte ein "a rational multiple of 1/3600 between -24 (inclusive) and 24 (inclusive)" sein

--java schreibt 1x compiling..., --jar schreibt 2x compiling...

defun koennte eigentlich Methoden ausspucken statt Member + {...}, funcToJava muss halt den richtigen ausdruck ins environment stecken (und extendfunc verwenden statt extendenv, ggf. auch das "bessere" extendfunc mit parameterliste verwenden)
-> ausser es sollte irgendwann moeglich sein, mit setq defuns neu zuzuweisen
-> (define x (lambda...) koennte ebenfalls eine methode ausspucken, oder weiterhin einen lvalue.
-> spaeter mit setq koennte define aenderbar sein, und defun nicht

apply als tailcall koennte/ sollte auch TCOd werden, let und progn bzgl TCO checken

usage gibt keine --no-XXX aus, nur mit parameter --help-features

in --help und --Xhelp aufteilen

eval im interpreter sollte ggf. auch eine funktion sein
-> geht nicht wg. TCO
    -> ein lambda ins environment reinstecken? eigentlich: ein closure, closure ist topenv
eval im compiler hat nur das global env, im interpreter hats das ganze dyn env
wuerde sich beim umstellen auf funktion angleichen lassen
-> oder eval bekommt einen zweiten optionalen param environment, bei null ists topenv

checken was passiert wenn eval eine kompilierte funktion im environment mitbekommt, oder ein lambda oder primitive returned
eval returned Interpreter-Primitive write:
    JMurmel> (apply (eval 'write) '(1))
    1
    ==> t
    JMurmel> :r
    history NOT run as Java - error:
    java.lang.ClassCastException: com.robertmayer.lambdaj.LambdaJ$$Lambda$7/396180261 cannot be cast to com.robertmayer.lambdaj.LambdaJ$MurmelFunction
            at com.robertmayer.lambdaj.LambdaJ$MurmelJavaProgram.applyHelper(LambdaJ.java:3097)

eval bekommt Compiler-Rt-Funktion:
    JMurmel> (eval '(f v) (list (cons 'f write) (cons 'v 1)))
    1
    ==> t
    JMurmel> :r
    history NOT run as Java - error: LambdaJError: function application: not a primitive or lambda: MurmelProgram$$Lambda$66/1440621772@4d14b6c2
    error occurred in S-expression (f v)
    JMurmel>

Compiler primitives stehen als (MurmelFunction)rt():... im Environment.
-> Optimierung: Wenn funcall ueberladen wird, dass es zus. zu funcall(Object...) ein funcall(MurmelFunction...) gibt,
   muesste dieser overload fuer die compiler primitives verwendet werden, und da faellt "if instanceof MurmelPrimitive" weg.
-> Noch besser: Compiler primitives nicht auf MurmelFunction casten sondern auf neuen MurmelCompilerPrimitive, dann koennt der passende overload
   ohne die thunking schleife gemacht werden.

die rt funktion intern() in MurmelJavaProgram ist anders als intern in CL, siehe https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node110.html
wsl ists zwischen make-symbol und intern angesiedelt
-> ggf. statt _intern -> intern, also nicht in der sprache anbieten

nicht: nach -- kommen files, sondern: nach -- kommen args fuer das programm, die stehen dann in *COMMAND-LINE-ARGUMENT-LIST*, vgl abcl p11

labels reparieren

HAVE_LISPEOL/ haveLispEOL/ commandline parameter weg, stattdessen writeln und lnwrite

tempdir wird nicht geloescht

compiler: doppelte define/ defun erkennen

interpreter: doppelte params bei lambda, let und letrec erkennen und verweigern

body() im interpreter fertigmachen

compiler: gibt ArrayIndexOutOfBoundsException, args werden nicht gegen params gecheckt

interpreter: ((lambda (a) a)) sollte einen fehler geben, gibt aber nil. erst ab 2 params werden die argumente richtig gezaehlt

in kommentaren, doku checken ob FFI an den richtigen stellen verwendet wird, ggf. embedded statt FFI

compiler: defun wieder auf Object = ...; {...} umstellen, sobald assignments moeglich sind

der interpreter und kompilierte programme unterstuetze beide getValue() und getFunction(). irgendwie ein interface drueberziehen

global symbol names muessen unique sein, lokale (noch) nicht -> dokumentieren
lambda parameternamen auch nicht, koennte ein problem sein


JMurmel> ((lambda([])((lambda(x |()| |(| |)|)(+ x |(| 1 |)| |()| |(| |(| |(|)) [] [] [] [])) 0)
-> sollte 1 liefern, klemmt aber und wird nie fertig (keine endlosschleife mit CPU usage)

JMurmel> '||
-> klemmt

JMurmel> '|(|
-> klemmt

JMurmel> '|(|  )
==> nil

JMurmel> '|)|
Error: line 2:0: unexpected ')'

Macros: in ANSI Common Lisp, Paul Graham pp413 steht quasiquote expansion
in https://icem.folkwang-uni.de/~finnendahl/cm_kurse/doc/schintro/schintro_130.html#SEC190 ist defmacro skizziert

http://www.gigamonkeys.com/book/macros-defining-your-own.html
(defmacro when (condition . body) (list 'if condition (cons 'progn body)))

JMurmel> (macroexpand-1 '(when (= 1 2) (write "hello ") (write "world")))
==> (if (= 1 2) (progn (write "hello ") (write "world")))

1e3 wird als symbol gelesen
-> doublePattern stimmt nicht

ByteArrayInputStream aus den tests wegputzen

backquote expansion unterschlaegt nil:
JMurmel> `(if a nil 'a-is-nil)
==> (if a (quote a-is-nil)) ; sollte "(if a nil (quote a-is-nil))" sein

Vgl. sbcl:
* `(if a nil 'a-is-nil)
(IF A
    NIL
    'A-IS-NIL)

grafik im compiler
-> was fehlt noch?

vielleicht round -> fround und round liefert ein integer mit expception bei overflow?
vgl http://www.lispworks.com/documentation/HyperSpec/Body/f_floorc.htm
ebenso round, floor, ceiling usw.

varargs im compiler gehen nicht
JMurmel> (defun f (a b . c) (list a b c))

==> f
JMurmel> (f 1 2)

==> (1 2 nil)
JMurmel> :r
history NOT run as Java - error: _f: not enough arguments
Error occured in line 1:1..1:7: (f 1 2)

integerp, floatp, code-char und char-code im compiler

(writeln nil) sollte nil\n schreiben, schreibt aber nur \n
-> interpreter und compiler

(writeln) gibt im compiler
java.lang.ArrayIndexOutOfBoundsException: 0
        at io.github.jmurmel.LambdaJ$MurmelJavaProgram._writeln(LambdaJ.java:3845)
        at io.github.jmurmel.LambdaJ$MurmelJavaProgram.funcall(LambdaJ.java:3996)

; in einem string ?!?

n-aeres char= und in mlib.lisp:eql nutzen

char-code -> char-int
code-char -> int-char

remove-if-not weg (deprecated in CL siehe http://clhs.lisp.se/Body/f_comple.htm), complement dazu, vgl http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Issues/iss172-writeup.html

vielleicht doch require in core murmel? provide, require, *modules*
-> vielleicht load umbenennen in require mit hardcodiertem provides-handling
   -> aber dann kann man im REPL nicht mehr neu laden
      -> ist :load eine abhilfe?

undefmacro
-> oder (defmacro m) entfernt das macro?

-> und ->> siehe https://github.com/amirgamil/lispy/blob/master/lib/library.lpy
; thread-first
; inserts first form as the first argument (second in list) of the second form, and so forth
(macro -> [terms]
    (do
        (define apply-partials [partials expr]
            (if (nil? partials)
                expr
                (if (symbol? (car partials))
                    (list (car partials) (apply-partials (cdr partials) expr))
                    ; if it's a list with other parameters, insert expr (recursive call) 
                    ; as second parameter into partial (note need to use cons to ensure same list for func args)
                    (cons (caar partials) (cons (apply-partials (cdr partials) expr) (cdar partials)))
                )
            )
        )
        (apply-partials (reverse (cdr terms)) (car terms))
    )
)

; thread-last
; same as -> but inserts first form as last argument (last in list) of second form, and so forth
(macro ->> [terms]
    (do
        (define apply-partials [partials expr]
            (if (nil? partials)
                expr
                (if (symbol? (car partials))
                    (list (car partials) (apply-partials (cdr partials) expr))
                    ; if it's a list with other parameters, insert expr (recursive call) 
                    ; as last form 
                    (cons (caar partials) (append (cdar partials) (apply-partials (cdr partials) expr)))
                )
            )
        )
        (apply-partials (reverse (cdr terms)) (car terms))
    )
)

befehlszeilenoption zum kompilieren und laufen lassen

int-char gibts nicht, nur code-char, char-code und char-int (char-int == char-code)
-> wieder zurückbenamsen
   fehler werfen falls kein character

characters sollten #\a sein, nicht 'a'

vielleicht #+, #- und *features*
multiline comments: #| ... |#

every, some

IEEE 754 sagt -0.0 == 0.0
Java == funktioniert, Double.compare() nicht
-> https://de.wikipedia.org/wiki/Vorzeichenbehaftete_Null#Vergleichsoperatoren

Builtin signum: if instanceof Long (n < 0)?-1:1, für double mit Math.signum

murmel-test automatisch laufen lassen, am ende ggf. fatal

=, <, > usw behandeln NaN nicht richtig:

let loop sollte auch 0 bindings akzeptieren

push & co auf get-setf-expansion umstellen

(funcall (lambda nil)) geht in sbcl, liefert nil
-> ((lambda nil)) sollte in murmel gehen, liefert aber "Error: lambda: expected 2 arguments or more but got only 1" bzw npe im compiler

mlib: length funktion für strings und listen, funktion (char string n) -> nter character von string

samples umsortieren: samples.murmel und samples.mlib
-> gabriel vielleicht in beiden, in samples.mlib brauchts weniger anpassungen

named letrec geht nicht im compiler, weils überhaupt nicht implementiert ist -> cce

bei mehreren files an der cmdline nur das ergebnis vom letzten ausgeben

load im compiler

getsym brauchts auch im compiler, z.b. für die funktion get-setf-expansion

atom2java: char und string unicode escapen: nur ascii, satzzeichen  und ziffern direkt ausgeben, rest als \u...

JMurmel> (apply + nil)
==> 0.0
JMurmel> :r
history NOT run as Java - error:
java.lang.NullPointerException
        at io.github.jmurmel.LambdaJ$MurmelJavaProgram.add(LambdaJ.java:4167)
        at io.github.jmurmel.LambdaJ$MurmelJavaProgram.funcall(LambdaJ.java:4277)
        at io.github.jmurmel.LambdaJ$MurmelJavaProgram.applyHelper(LambdaJ.java:4286)
        at MurmelProgram.runbody(MurmelProgram.java:127)

setq, rplaca, rplacd im compiler
-> rplaca, rplacd erledigt
-> setq teilw erledigt (nur eins)
-> setq erledigt

--run soll nil nicht als result printen, :r schon

https://gigamonkeys.com/book/variables.html
Each initialization form is either a list containing a variable name and an initial value form
or--as a shorthand for initializing the variable to NIL--a plain variable name.
The following LET form, for example, binds the three variables x, y, and z with initial values 10, 20, and NIL:
(let ((x 10) (y 20) z)
  ...)

Vielleicht car, cdr, cons, ConsCell in eine Basisklasse LambdaJRuntime rausziehen?
LambdaJ koennte man als Lisp Programm sehen, das von Hand nach Java uebersetzt wurde,
und ein Lisp Programm verwendet Lisp Runtime wie car, cdr, ... .
Falls ein LambaJ Compiler kommt, wuerden erzeugte Java Programme dieselbe Runtime verwenden.
Fuer interpretierte Programme gibts die Builtin-Wrapper, die Parameter-Checks machen und
die Argument-Liste in Argumente wandeln.
-> public static nested class LambdaJRuntime + "import static LambdaJ.*"
   damit gaebs nur wenig Aenderungen in LambdaJ, und externer Code haette auch Zugriff mittels "import static LambdaJ.*" 


let* mit einfacher syntax geht nicht im compiler:
JMurmel> (let (a) (write a))
nil
==> t
JMurmel> :r
nil
==> t
JMurmel> :res
JMurmel> (let* (a) (write a))
nil
==> t
JMurmel> :r
history NOT run as Java - error: not a symbol: a
error occurred in S-expression line 1:1..1:20: (let* (a) (write a))
JMurmel>

das suffix * wird für "sequentielle zuweisung" benutzt (let*, do*, prog*, ...)
-> NICHT für rplaca* & co benutzen

checken was passiert wenn require 2x die gleiche datei bekommt, aber mal als ./xxx und mal als d:/.../xxx
-> syntax ist (require modulname optfilespec) -> object
   gehasht wird "modulname", wenn verschiedene modulnamen verwendet werden, wirds 2x geladen
   -> das ist eher schlecht, d.h. diese syntax ist schlecht, modulname sollte in der datei drinstehen, so wie in CL
     -> warum brauchts überhaupt modulname + optfilespec? vielleicht besser modulname ODER filespec, und gehasht wird der kanonische pfad?!?
-> umbauen in (require filespec), gehasht wird der kanonische pfad
  -> oder vielleicht doch "provide" so wie in CL und elisp?
  -> in CL sind require und provide funktionen, ist aber schwierig im murmel compiler

bei progn usw castet der compiler args auf ConsCell
-> (progn . 1) -> CCE

compiler: bei opencoded wie car sollte argumentanzahl zur compilezeit gecheckt werden, dafür aber nicht zur laufzeit
-> derzeit wird zur compilezeit nix gecheckt, dafür werden z.t. die "normalen" funktionen mit argcheck eingebaut

lambda calls haben im generierten code einen argCheck. bei let & Co ist der argcheck unnoetig
-> ist doch nötig, ausser es würde zur compilezeit gecheckt

progn toplevel expandierung kann ggf. in prognToJava gemacht werden?
-> nein, kann nicht, weil die forms die ein toplevel progn enthält als toplevel forms behandelt werden sollen

mlib-test: tests constantly wieder entkommentieren
-> defmacro als nicht-toplevel form und macroexpand-1 im compiler

mlib: case sollte mit eql checken?
CLHS sagt "These macros allow the conditional execution of a body of forms in a clause that is selected by matching the test-key on the basis of its identity."
SBCL macht eql:
D:\robert\projects\jmurmel>sbcl220
* (macroexpand-1 '(case a ((1) 'one) (2 'two) ((3 4) 'threeorfour) (t 'other)))
(LET ((#:G430 A))
  (DECLARE (IGNORABLE #:G430))
  (COND ((OR (EQL #:G430 '1)) NIL 'ONE) ((EQL #:G430 '2) NIL 'TWO)
        ((OR (EQL #:G430 '3) (EQL #:G430 '4)) NIL 'THREEORFOUR) (T NIL 'OTHER)))
T
*
-> mlib sollte wohl auch eql nehmen, und key listen mit nur einem element von member auf eql umstellen

Compiler: setq in closures gibt code der nicht kompiliert: final or effectively final...
(let* (a) (progn (setq a 1) a)) ist das einfachste beispiel dafür: let* hat Java variablen, das geht nicht, letrec hat members, das würde gehen
  -> unittest machen
-> letRecToJava reusen, aber das environment zu anderem zeitpunkt befüllen (nicht alle vor der initialisierung sondern zug um zug)

mlib-test auch mit compiler laufen lassen (sobalds load und setq gibt)

rplaca für ArraySlice sollte nicht schwer sein

Iterator von ListConsCell und ArraySlice funktionieren nicht bei Mischungen aus ListConsCell und ArraySlice
gaben falsches ergebnis, werfen jetzt exceptions.
umbau von iterator auf cdr hat den nachteil, dass cdr(ArraySlice) jedesmal new ArraySlice macht, wirkt sich u.a.
in der Murmel funktion append und listToArray aus
-> reparieren oder ausbauen
-> ggf. statt zweier Iteratoren einen Iterator im Interface, der ListConsCell UND ArraySlice versteht?
-> vielleicht auch forAll ausprogrammieren?

Compiler: let* dynamic sollte als unsupported angemeckert werden (oder supported werden)

compiler: let* dynamic ist eigentlich let dynamic

compiler let/ let* dynamic: doppelte bindings abweisen bzw. behandeln

isSymbol sollte intern("+") == op verwenden ?!?

(let* dynamic ((a 1)) a) sollte eig einen fehler geben, geht aber im interpreter?!?

compiler: argcheck bei let/ let*/ letrec sollte unnötig sein? bei named... ist es nötig

let dynamic im interpreter

gabriel 3.02_stak.lisp vereinfachen

write, writeln, lnwrite sollten optionalen parameter "print-escape-p" bekommen, default t

speed auf 0 wenn reduzierte features?

eql opencoden

jm --lambda kracht, jm --lambda+ geht

assq exposen

opencoden im interpreter

mlib: conjoin, disjoin
