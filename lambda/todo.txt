defun koennte eigentlich Methoden ausspucken statt Member + {...}, muss halt den richtigen ausdruck ins environment stecken
ausser es sollte irgendwann moeglich sein, mit setq defuns neu zuzuweisen
(define x (lambda...) koennte ebenfalls eine methode ausspucken, oder weiterhin einen lvalue.
-> spaeter mit setq koennte define aenderbar sein, und defun nicht

ueberhaupt: define vs defvar/ defparameter/ defconstant klaeren

assoc beschleunigung xter anlauf:
-> ein closure koennte eine hashmap mit symbol -> (symbol . value) lookups haben. evalquote muesste einen optionalen parameter bekommen,
   wenn ein closure gestartet wird, wird die hashmap mitgegeben, sonst ists null. der symbol-lookup in evalquote muesste die map geeignet ausnuetzen wnn != null
-> oder: in defun werden symbole durch einen platzhalter ersetzt, der lazy aus dem environment befuellt wird


die rt funktion intern() in MurmelJavaProgram ist anders als intern in CL, siehe https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node110.html
wsl ists zwischen make-symbol und intern angesiedelt

nicht: nach -- kommen files, sondern: nach -- kommen args fuer das programm, die stehen dann in *COMMAND-LINE-ARGUMENT-LIST*, vgl abcl p11

funktion fatal dokumentieren, ggf. umbenamsen

define im compiler auch nicht-toplevel zulassen: in formToJava zuweisung generieren, undefined symbole sammeln und nachher members generieren
defun nur toplevel zulassen

letXXX und labels im compiler
named let in einen Java loop uebersetzen. damits in generierten lambdas funkt, muss fuer den rekursiven aufruf wohl eine exception missbraucht werden
recurs:
for (;;) {
  try {
    // args neu belegen
    throw RecursionException();
  } catch (RecursionException e) { continue recurs; }
}

packages koennte man mit namenspraefixes umsetzen, und bei einer symboltabelle/ einem environment bleiben.
laesst sich dann auch sehr einfach auf Java packages/ klassennamen umlegen

compiletojar, tojava, ... sollten eigentlich in der Sprache angeboten werden
-> erst mit packages, weil dann brauchts weniger parameter


--srcjar option: die sourcen dazuzippen? oder extra srcjar?

java -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining -XX:+PrintCompilation -jar target\jmurmel-1.0-SNAPSHOT.jar test_ack.lisp

in CL gibts open-coded (inline) functions, damit waeren cons, car, ... inline im compiler moeglich
-> aber wsl nicht einfach als special form. irgendwie ins environment reinschreiben, dass das open coded werden darf,
   -> wenn jemand eine eigene cons funktion implementiert (mit let oder labels, define/ defun waere dzt. verboten),
      dann steht nicht mehr "open coded" im environment und es wird die richtige funktion aufgerufen

HAVE_LISPEOL/ haveLispEOL/ commandline parameter weg, stattdessen writeln und lnwrite
-> oder besser ein subset von lisp printer umsetzen http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/fun_writecm_p_rintcm_princ.html
prin1 object &optional output-stream => object

prin1 produces output suitable for input to read.
princ is just like prin1 except that the output has no escape characters.
print is just like prin1 except that the printed representation of object is preceded by a newline and followed by a space.
pprint is just like print except that the trailing space is omitted and object is printed with the *print-pretty* flag non-nil to produce pretty output.



ArraySlice koennte das Array verkuerzen (neue kuerzere Kopie), wenn offset >32 && offset > arry.length/2, vielleicht so, dass die neue groesse immer eine 2er potenz ist
-> gibt probleme wg. aliasing, sobalds rplacX gibt, gibts noch mehr probleme

funcToJava koennte selbstrekursive calls erkennen und statt call die parameter ersetzen und zum beginn springen:
Object f(p1, p2) {
  recur:
  do {
    ...
    // (f 1 2)
    p1 = ...;
    p2 = ...;
    continue recur;
  } while (false);
}
vgl. PROGITER aus "A Lisp Machine with Very Compact Programs, L.Peter Deutsch, 1973"
  
ConsCell: methoden rplaca und rplacd, jeweils fuer die subklassen geeignet umsetzen: rplacd bei zwei IntArraySlices koennte die arrays in ein groesseres hintereinanderkopieren
-> erstmal nicht in der sprache anbieten, spart aber einige casts v.a. in den tests
-> und nth und nthcdr, anschliessend caaar, cdddr, ... mit nth bzw. nthcdr implementieren
-> achtung: es koennten mehrere ArraySlices auf das selbe array zeigen.
   -> Vor naiv implementiertem rplacd: alle ArraySlices zeigen auf die gleichen daten,
      aenderung ueber ein slice ist in den anderen sichtbar
   -> nachdem ein ArraySlice das array durch ein anderes ersetzt hat: slices zeigen auf verschiedene daten,
      anderungen ueber ein slice sind NICHT mehr in anderen sichtbar-> FEHLER
   -> rplacd ist nur fuer ListConsCell umsetzbar, nicht fuer ArraySlice, rplaca wuerd wsl gehen

statt environment als liste:
environment als hashmap, fuer jedes symbol gibts eine liste von values
-> aber das environment nach funktionsende abbauen ist aufwaendig

Den Compiler retargetable machen: methoden die Code ausspucken nach emit... umbenamsen und in eine klasse zusammenfassen, es koennte mehrere solche klassen
fuer mehrere zielsprachen geben, formsTo... bekommen so eine instanz als parameter
oder visitor pattern?


Murmel define ist ziemlich gleich wie CL defvar (aber Murmel gibt fehler bei duplikaten, CL nicht?!?)
-> umbenennen?
-> frueher gabs anscheinend define mit einem parameter:
    in LISP geht define so: (vgl. ABOUT LISP)
    -> (define (first (lambda (x) (car x))))
           first
    -> damit koennte insertFront einfach arg ins environment stecken


ConsCell.iterator() ueberladen: iterator(typ) liefert verschiedene iteratoren:
circular list liefert nach der ersten runde hasNext() == false
                                            fehler
dotted list liefert beim zugriff auf letztes element letztes element das element
                                                                     hasNext() == false, hasNext(true) liefert das letzte element
                                                                     fehler
sowohl mapcar wie auch maplist zulassen: der iterator liefert entweder nth(cursor++) oder nthcdr(cursor++)



trace und features refactoren:
nicht int features sondern Set<Features>
statt trace >= TRC_XXX.ordinal -> methode TraceLevel.ge(TraceLevel)

anzahl parameter duerfen begrenzt werden, auch bei varargs
-> hilft bei cdr(arg) im compiler, umsetzen, dokumentieren, global mit dem wert erfinden, vgl. http://...

define nur toplevel zulassen (wg. kompilieren)
-> oder kann man die variable im ersten lauf mit UNDEF belegen und der zweite lauf setzt einen wert? was ist mit functions?
    oder das globale symbol wuerde erst im zweiten lauf des compilers an geeigneter stelle ins environment des compilers gesteckt?
    -> dann muesste der compiler auch globales/ lokales environment haben
-> mehraufwand lohnt wsl nicht

eval im interpreter sollte ggf. auch eine funktion sein
-> geht nicht wg. TCO
    -> ein lambda ins environment reinstecken? eigentlich: ein closure, closure ist topenv
eval im compiler hat nur das global env, im interpreter hats das ganze dyn env
wuerde sich beim umstellen auf funktion angleichen lassen
-> oder eval bekommt einen zweiten optionalen param environment, bei null ists topenv

funktion compile, und dem interpreter beibringen, wie kompilierte funktionen aufgerufen werden, und/ oder Primitive auf MurmelFunction umstellen
-> erst CPS im compiler umsetzen

IntArraySlice, CharArraySlice, ...
string->array koennte so ein CharArraySlice liefern, readbytes koennte ein ByteArraySlice liefern
nth und nthcdr in ConsCell rein, fuer alle subklassen geeignet umsetzen
cdddr sollte als nthcdr(3) umgesetzt werden, caaar als nth(3), caddr als car(nth(2)) usw., dann waeren die ArraySlices effizienter
readObj koennte ArraySlice liefern, wenn eine sexpression mehr als X member hat, vielleicht als pratt parser umsetzen?
-> dann gibts aber keinen platz fuer zeilennummern, also ggf einen gesonderten reader zum lesen von stdin basteln



https://people.eecs.berkeley.edu/~bh/ssch27/appendix-cl.html
beschreibt unterschiede zw. scheme und CL und ist damit ein guter ueberblick ueber CL, auch file open/ close

https://github.com/phoe/cafe-latte
CL conditions
dynamic variables
tagbody go
block/return-from
restart
-> block/return-from koennte wsl mit "label: for (;;) break label;" umgesetzt werden (plus das richtige result setzen)
-> tagbody/go koennte wsl mit "label: for (;;) continue label;" umgesetzt werden
-> beides wird in Java lambdas nicht gehen, ggf. im lambda "throw ..."


ANSI-CL hat die beiden funktionen lisp-implementation-type, lisp-implementation-version
-> https://franz.com/support/documentation/9.0/ansicl/dictentr/lisp-imp.htm

zeilentabellen lisp->java mitfuehren und ins java verpacken? dann koennte ein catch im main() den stacktrace umschluesseln
-> javacode sollte mehr linefeeds bekommen
-> javaassist kann linenumbertable fuer methoden neu setzen, die enthalten sourcefile und sourcezeile
-> apache bcel wsl auch, bcel ist in java mitgepackt: com.sun.org.apache.bcel

wenns namespaces gibt, sollte :: wahrscheinlich i-wie mit import verheiratet werden

usage gibt keine --no-XXX aus, nur mit parameter --help-features

vielleicht doch nil=null und t=Boolean.TRUE? Interpreter ggf. angleichen

der interpreter und kompilierte programme unterstuetze beide getValue() und getFunction(). irgendwie ein interface drueberziehen

refactor: alles was zum interpreter gehoert in eine neue Klasse LambdaJ.MurmelInterpreter heben
-> auf gleichem Level wie LambdaJ.MurmelJavaCompiler und LambdaJ.MurmelJavaProgram
-> dann koennten Interpreter und Program das gleiche Interface fuer getValue(), getFunction() haben
-> runtime aussen vor lassen? oder es gibt methoden die implementieren z.B. write, und getrennte wrapper fuer interpreter und kompilierte programme

im environment des compilers koennt man den typ der symbole mitfuehren, das wuerde compiletime typchecks ermoeglichen.

das main von compilierten programmen sollte am ende ggf alles abbauen. vielleicht eine methode dazu, die auch exposed ist? interpreter auch?
oder macht das der gc, wenns keine referenz auf das kompilierte programm/ den interpreter mehr gibt?

compiler:
-> irgendwie alles (lambdas, letXXX, labels, ...) in eine funktion (Object[] args, var Function next) -> Object verpacken
-> next kann ggf. von der funktion woanders hin gebogen werden (fuer continuations)
-> ohne continuations: lambda ggf. vorerst nicht aendern sondern per apply(Function, params, next) ausfuehren lassen
-> mit continuations: eine continuation ist statt normalem lambda: (Function continuation, Object[] args, var Function next) -> Object
    -> die continuation kann "continuation" in next reinstecken, dann wird "continuation" als naechstes ausgefuehrt statt "next"
-> body hat dann einen loop, der die funktionen der reihe nach aufruft, jeweils das gelieferte "next" ist die naechste funktion
-> statt var parameter koennen funktionen auch ein tupel (Object, Function) als result liefern

-> kann man eigentlich im interpreter gleich machen

cl hat with-open-file

scope und extent:
https://stackoverflow.com/questions/64418124/dynamic-binding-in-common-lisp
https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node43.html

Tracer bei JSR-223 nutzen.

irgendwie mit maven von Murmel nach Java uebersetzen, dann kann man einen teil einer app in murmel schreiben und fast nahtlos von Java aufrufen
-> https://stackoverflow.com/questions/2147115/generating-sources-by-running-a-projects-java-class-in-maven

in C gibts #pragma line, das schreibt debug infos ins Object file. gibts in Java annotations und einen processor, der dasselbe macht?
-> debuggen von kompilierten murmel programmen

anstatt letXX, cond im compiler auszuprogrammieren, kann man auch desugar programmieren, idealerweise als macroexpander
-> desugar ist macroexpand mit zus. macros fuer let-> lambda usw.
-> stattdessen kann man ggf. cons, car, cdr, +, - usw inlinen (aber erst schauen ob das was bringt)

Murmel2Java fertigmachen, TCO: wahrscheinlich mit CPS

die generierten programme koennten ein cmd arg "--repl" unterstuetzen: mit dem arg gibts nach body() kein exit() sondern repl()

filenamen an der befehlszeile

filevariablen statt der gefaehrlichen cmdline args

global symbol names muessen unique sein, lokale (noch) nicht -> dokumentieren
lambda parameternamen auch nicht, koennte ein problem sein

lisp eol von cmdline parameter auf lisp global umstellen
-> oder write uebernimmt liste mit keyword/value tupel: (write obj flags...), z.B.
   (write "Hallo" (list ('eol-style 'lisp) ('escape-atoms t) ('max-length 20) ('pprint t)))
-> oder write uebernimmt *optionale* liste, fallback ist eine globale variable *print-environment* mit soner liste
   (write "Hallo") ; write benutzt *print-environment*
   (write "Hallo" (cons ('(max-length 20) *print-environment*))) ; write benutzt argument

JSR223 vielleicht in ein zweites jar verpacken?





tests von lis.py verpacken

mit maven replace regex aus murmelref.lisp eine murmelref.md datei erzeugen

eval, interpretExpressions & Co aendern:
- einige init methoden die setzen in, out, environment, symboltable
- eine methode eval(ConsCell progam), das ist ein wrapper um das bisherige eval, der wrapper schmeisst eine exception falls nicht
  initialisiert.
- die sprache ist ja eine liste von ConsCells, mit so einem API waers ggf. einfacher/ natuerlicher einen anderen Parser davor
  zu schalten
- das derzeitige eval kann nur eine expression, listen arbeiten repl() bzw. interpretExpressions() ab. Obiger eval wrapper
  sollte auch listen koenen



eval bekommt einen zus parameter prevenv, dann kann zip bei tailcalls das aktuelle
scope wiederbenutzen:
    statt cons -> symbol und wert neu setzen, ist das neue environment laenger ggf. neue entries dranhaengen
    ist das neue env kuerzer als das alte, erledigt sich das indem der return von zip das neue ende des env ist
-> kein anwachsen des env bei dynamic, weniger new ConsCell bei lexical


current-cc ist eigentlich immer cdr(form)
-> bzw. cons(cdr(form), current_cc) oder append?!?
        -> und wie baut man das environment wieder ab?
            -> statt cons-> cons3(cons3(cdr(form), current_cc, newScope), env)?
        -> und wie uebersetzt man das nach java?
   damit koennt ma continuations umsetzen, und eval waer ueberhaupt nicht mehr rekursiv, statt return-> form=current_cc; continue;
   -> das waer dann "compile with continuations", continuations kann man muss aber nicht in der sprache anbinden



vielleicht eval irgendwie umbauen, dass ein symbol nicht den wert sondern den enventry liefert? das waer dann ein lvalue,
und wuerde ein allfaelliges setf ermoeglichen. (get-record recordsymbol propertysymbol) wuerde dann auch ein (symbol . value)
tupel liefern, und dann wuerd (setf (get-record my-record propertysymbol) value) gehen
eigentlich muesste das nur in eval->symbol und zip eingebaut werden



Objektorientierung: records (default immutable) und "methoden" ala go (wenn eine funktion als ersten parameter einen recordtyp uebernimmt)
(defrecord mutable? symbol (extends...) symbol...) -> symbol ; eigener namespace fuer records? feldsymbols haben automatisch eigenen namespace, weil sie in einer hashtable des records drinstehen ?
(make-record mutable? recordsymbol (propertysymbol value)...) -> record
(get-record recordform propertysymbol) -> value
-> unions auch reinzwicken? z.B.
   (defrecord mutable? symbol (extends...) propertysymbol-oder-unionsymbol+(propertysymbol...)...)
   -> ohne typen fuer die properties wird das wohl zu kompiziert, und java hat auch keine unions
      ohne typen sind unions auch nicht notwendig, weil man kann einem symbol verschiedene records zuweisen

methoden, also funktionen die nur fuer einen bestimmten recordtyp zutreffen, kann man machen, muss man aber nicht

vielleicht die recordnamen in den selben namespace geben wie double, integer, string (die noch keinen haben)?



CDI und EJB aehnlich :: integrieren?
-> dazu brauchts eigentlich einen Lookup im Java-Scope, d.h. BeanProvider.getContextualReference() muss i-wie integriert werden
   -> DeltaSpike so verpacken, dass i-wie ein CustomEnvironmentSupplier uebrigbleibt
   -> kann man das aufrufen eines CustomEnvironmentSupplier in eine Murmel Funktion verpacken?

cmdlineflags wos let aber nicht letXXX oder ggf named let gibt
-> --no-scheme, auch null? und ggf if abdrehen
-> dann gibts nur mehr not bound, kein undefined value

:: macht im prinzip dasselbe wie CL create-method
-> ggf parameterreihenfolge anpassen
   hinweis in murmel-langref.lisp

zus Primitives: https://learnxinyminutes.com/docs/common-lisp/
(expt x y) -> x hoch y, wurzelziehen? oder ist das (x hoch 1/y)?
(intern string) -> symbol
-> intern ist case preserving (intern "aaa") -> |aaa|, anscheinend macht der reader uppercase, und symbol lookup ist case sensitive
AND, OR, XOR, NOT
-> brauchts eigentlich nicht, ist sugar ueber if
null? brauchts eigentlich nur in scheme, (null? x) -> (not x)
-> umbenamsen



tabs im scanner richtig zaehlen
col += tabsize
col = (col / tabsize) * tabsize

Fexpr unterstuetzen, in eigenen Namespace stecken und diesen Namespace nur in define auswerten/ fexpr aufrufen/ aufloesen
-> sind das dann effektiv macros?


koennt ma namespaces irgendwie so einfuehren:
namespace xxx biegt topenv woandershin
define schreibt nicht in topenv sondern ins package
export schreibt ins topenv
import kopiert (symbol . value) entries aus einem anderen env ins aktuelle
assoc sucht erst im aktuellen namespace, dann in topenv (wie spielt das mit den gestapelten environments zusammen?)
-> namespaces nach C oder object files waeren irgendwie C und H files bzw getrennte object files - export schreibt ins .h file
   bzw exportiert das symbol aus dem object file





Vielleicht in define den Lisp Code nach Java uebersetzen und mit tools.jar uebersetzen? Und aus dem erzeugten class file
ein neues primitive basteln?
-> denkbar waere ein aeusserer und ein innerer compiler. der aeussere uebersetzt nach java/c/..., der innere nach bytecode
-> vor dem compiler koennten transformationen laufen wie z.b. let->lambda, dann brauchte der compiler und eine allfaellige vm
   nicht so viele features haben
   -> oder der (bytecode) compiler erzeugt code der nur weniger vm features braucht



das environment ist eine liste von maps:
-> zip steckt eine neu map vornedran
-> assoc arbeitet die liste ab, und durchsucht jede map, erster treffer gilt
-> oder eine immutable map machen, vgl. hashmap aus scheme:
   map.extend(liste von key/values) -> neue map der lookup schaut ggf. rekursiv im parent nach
-> oder env = newscope(), da wird eine neue hashmap vornedran gepickt, und halt ggf flat closures berücksichtigen

-> ein lexikalisches environment koennte ALLE werte aller uebergeordneter environments enthalten.
   das geht, wenn kein set moeglich ist oder
   wenn die maps nur referenzen auf mutable werte enthalten: entweder mutable Java Objekte oder nicht die values
   aus dem environment sondern die (symbol . value) conses aus dem environment
   -> performance wird wohl nur dann besser, wenn solche gesamt-closures nur fuer define/ defun erstellt werden
   -> closures koennten statt map ein array bekommen, wenn alle symbolreferenzen durch arraylookups ersetzt werden
      -> in der liste mit dem code des lambda alles symbols ersetzen durch (envref n)

   -> referenzen in lexikalische closures rein aufloesen geht auch ohne maps:
      symbolreferenzen durch zugriffe auf das (symbol . value) cons ersetzen
	  vielleicht gemeinsam mit macroexpand?!?
	  -> cache fuer assoc? jedes scop beginnt mit einer neuen leeren cache-map (oder immer dieselbe, die immer wieder geleert wird),
         damit waeren mehrfache zugriffe auf das selbe symbol schneller, bei vorabaufloesen UND bei dyn env
   
define sollte das aktuelle environment erweitern, nicht das globale
zusaetzlich define-global einfuehren (ist das dasselbe wie defconst? solange keine re-definition und kein set -> ja)
-> oder auch nicht: Scheme define != Old Lisp define





neuen parser: (evtl while, for (list) umsetzen?)
program ::= stmt*

stmt ::= exp ';'

exp ::= assignment | lambda | case | block | application

assignment ::= s '=' exp
-> (define s exp)

case ::= 'case' (exp block)* 'esac'
-> (cond (exp block))

block ::= '{' stmt* '}'
-> (progn explist)

lambda ::= function(p1, p2) block   		; implicit symbol 'self' for recursion
-> (lambda (p1 p2) stmt*)

application ::= builtin | f(exp1*)			; add, sub, ..., pair, list 
-> (f explist)

(e1, e2)
-> '(e1 e2)

atomexp ::= atom
-> atom


builtin:
pair(exp1, exp2)
-> (exp1 . exp2)

list(exp1, exp2, exp3)			; list(exp*)
-> (list exp1 exp2 exp3)

add(1, 2)
-> (+ 1 2)



ConsCell methoden double carAsDouble(), long carAsLong() einfuehren
-> und DoubleConsCell, LongConsCell, das hat zusaetzlich Java primitive datentypen als car und ueberlaedt die methoden

LambdaJSymbol.equals, equalsIgnoreCase aufraeumen

multivalue let: wenn funktionen mehrere werte zurueckgeben, koennte ein erweitertes letXXX zuweisen:
(let ((r1 r2 (multivaluefunction)))
   (print r1)
   (print r2))
-> gibts schon in scheme


koennte makeClosureFromForm beim closen alle (im environment vorhandenen) symbole (die spaeter ein lookup waeren)
direkt durch die (symbol . value) tupel ersetzen? support dafuer muesste anschliessend in eval eingebaut werden
-> das wuerd env cache ersparen
-> nicht einfach ersetzen, sondern ersetzen durch eine neue special form (envref (symbol . value))
   die ersetzungsroutine (die 1x laeuft) koennte einen cache haben, um mehrfache lookups auf dasselbe symbol zu vermeiden
-> closure braucht man dann nur mehr fuer den dynamischen lookup der globalen variablen dies beim closen noch nicht gab
    -> auch solche globalen referenzen koennten beim aufruf der closure beim ersten zugriff auf nunmehr existierende globals umgepatcht werden
-> nur bei define/ defun machen, ggf. noch bei labels?
-> soll envref ein reserved word sein, oder darf das bei eval und/ oder macros verwendet werden?
   -> koennte auch versteckt sein, es gibt ein Object sEnvref, aber nicht "sEnvref = intern("envref")" sondern "sEnvref = new Object()"
      -> das koennte man spaeter durch umstellen sichtbar machen, ggf. mit anderem symbolnamen
-> das muesste die schlimmsten performance probleme bei groesseren programmen erledigen ?!?

-> beim aufruf wird derzeit env/ closure mit cons erweitert. man koennte obigen trick auch auf die parameter anwenden 
   parameter gehoeren nicht zur closure (wuerden sich sonst bei rekursion ueberschreiben).
   beim aufruf koennte statt environment erweitern eine arraylist mit werten uebergeben werden:
        - die liste mit parameternamen ist bekannt, im array stehen werte an jenem index, der dem index des symbols in der parameterliste entspricht
        - index 0 ist ein uplink zur closure
        - zugriffe auf parameter muessten ersetzt werden durch (paramref idx)
        - die arraylist bekommt eval als parameter env, eval muss dynamische symbol lookups mit assoc(symbol, env[0]) machen statt assoc(symbol, env) oder assoc wird angepasst
        - beim environment extenden fuer aufrufe aus einer closure heraus brauchts auch anpassungen -> eigentlich nicht, wenn assoc erweitert wird
        - es waer einfach, slots in der arraylist fuer selbstrekursive tailcalls wieder zu verwenden



printSEx: if (car(list) == sQuote) print "'" + printSex(cdr(list))
der reader sollte wsl ' immer auf (quote... umsetzen, egal ob quote unterstuetzt wird oder nicht

umbenennen:
lispStdout -> lispPrinter
ObjectReader -> LispReader, #readObj -> #read
ObjectWriter -> LispPrinter, #printObj -> #print


synchronized ueberlegen






Evolution of Lisp, pp 66 ff: Macros nach dem paper von Timothy P. Hart in 1996
pp73ff: modernes defmacro
-> besser wie lispy2


solange es kein rplaca gibt, koennte man int, float, double und ggf kurze/ lange strings/ symbols in jeweils massgeschneiderte ConsCell stecken
-> muesste sehr hohe speichereinsparung und performanceverbesserung bringen
sollte es rplaca geben, muesste dieses logik haben, um bei typaenderung in ein neues ConsCell umzukopieren und dieses ggf. einzuhaengen
-> oder typaenderungen sind verboten
-> oder man kann optional einen typ angeben, dann ists schnell und der typ ist fix, ohne typangabe ists langsam aber der typ darf sich aendern
z.B. statt
(lambda (a b) (...))
(lambda (integer a double b) (...))
 

nach bytecode compilieren: der bytecode wird dann in einem threaded interpreter abgearbeitet
der interpreter sollte wsl direkt in eval drinstehen wg. TCO. der threaded interpreter kann
direkt cons, car, cdr, +-*/ usw. ist sonst aber sehr aehnlich dem interpreter-eval.
die threaded interpreter "methode" bekommt environment
und ein int (oder char? eher byte[]) array mit bytecode und arbeitet den bytecode ab:
char[] code; XXX env;
int ip = 0;
top:
while (ip < code.length) {
switch (code[ip++]) {
case car: extendenv(...; continue top;
case cons: extendenv(new ConsCell(...; continue top;
}

ggf. auch in den interpreter einige funktionen wie +/- "inlinen"



cache fuer assoc: define/ defun loescht einen allenfalls vorhandenen eintrag.
nicht globaler cache sondern lokale variable in eval, wenn eval mit einem
erweiterten environment endet, ist der nunmehr ungueltige cache auch weg.
ggf nicht hashmap<string,object> sondern arraylist<ConsCell>, eine funktion
wird wohl nur wenige symbole benutzen, da kann linear search schneller sein,
und es werden viel weniger objekte erzeugt.
-> problem: bringt nix bei rekursionen, ausser aufrufe von eval bekommen
   eine kopie des aktuellen cache, aus dem neue lokale variablen/ argumente
   entfernt wurden

zweiter versuch:
topEnv sollte ein Member vom Interpreter sein, damit allfaellige threads, in denen eval laeuft,
dasselbe globale environment haben und ggf erweiterungen sehen
Namensduplikate sind im globalen topEnv verboten, deswegen braeucht man keine reihenfolge, hashmap fuer topenv
wuerd gehen
ein execution environment, d.h. was am parameter env von eval haengt, ist immer einige dynamische Scopes
des executioncontext (parameter, let, ...) aufeinander gestapelt,
drunter ggf. lexical closure, drunter (dynamisches) globales topEnv.
Wenn ein lexical Closure aufgerufen wird, ist das environment (parameter closure topEnv).
Wenn ein dynamic Lambda aufgerufen wird, ist das Environment (parameter aktuelles-dynamisches-environment).
-> bei dynamic Lambda koennen Symbole des aktuellen Env globals verstecken, bei lexical nicht

wenns in einem Scope keine duplikate geben darf, koennte es pro scope einen cache fuers environment geben.
Ist ein parameter von eval so wie env, bei einem neuen executionscope
(einige aber nicht alle rekursiven aufrufe von eval) faengt man mit einer neuen, am einfachsten leeren map an.
der Scope endet beim return von eval, damit ist die hashmap auch weg.
bei einem variablenzugriff wird im cache nachgeschaut, und ggf. das
(symbol . wert) tupel ganz normal gesucht und in den cache gesteckt.





Speicherverwaltung selber machen in Java oder C:

Der Heap ist ein Array int[], 2 aufeinander folgende elemente sind ein cons
allokation ist bump allocation. ist der zaehler == array.length muss das array in ein neues groesseres array umkopiert werden
die ints werden als bitmasks interpretiert:
  die niedgristen 3 bits sind der variablen typ (d.h. 8 typen moeglich)
  intwert >> 3 ist der wert:
    pointer: ein index ins array
    symbol: ein index in die (getrennte) symboltabelle
    number: die zahl
    usw.

statt 3 bits koennten mehr oder weniger verwendet werden, wird die max anzahl cons zells groesser oder kleiner
in C koennten (muessen aber nicht) Pointer wirkliche Pointer statt indizes sein, wuerde eine indirektion sparen,
  diese muessten beim realloc des arrays (i.e. heap vergroessern) aber angepasst werden
optionales GC waer moeglich, in C und in Java, oder man laessts weg fuer kleine programme
generational heaps waeren auch moeglich, dann muesste es verschiedene pointertypen geben, jeder typ zeigt in einen anderen heap
das ergebnis einer expression koennte aus dem Heap (der auch garbage enthaelt) rausextrahiert werden, indem man wie ein GC dem root folgt,
  das ergebnis ist dann ein array das kleiner ist als der heap, also der GC komprimierte Heap

das waer alles in einer Klasse Heap { cons(); car(); cdr(); } abstrahierbar, nur die klasse kennt ConsCell
-> interface ConsCell waer moeglich. beim ArrayHeap sieht ConsCellImpl so aus:
ConsCellImpl {
    ConsCell(int n);
    Object car() { return get(n); }
    Object cdr() { return get(n+1); }
    Object get(int n) {
        int type = heap[n] & 1<<3;
        int value = heap[n] >> 3;
        switch (type) {
        case integer:
        case pointer: return new Integer(carvalue);
        case symbol: return symtab[carvalue];
        case float: // Float#intBitsToFloat benutzen, vgl NaN trick in Lox
        }
    }
    rplaca(newVal)...
    rplacd(newVal)...
}

ohne variablenzuweisungen braucht man eigentlich keinen gc und kein refcounting, einfach beim return
"alles freigeben, was nicht im returnvalue steckt" ?!?
-> so wirds wohl rust machen, plus borrow checker
-> "alles freigeben, was nicht im returnvalue steckt" ist aber nicht so leicht



backticks und , ggf. auch ,@ im scanner einbauen?
(defun constant-adder (a)
  (eval `(lambda (b) (+ (quote ,a) b))))

einen debugger in eval einbauen? expression fuer expression? und/ oder eine special form break? :break symbol?

derzeit haben closures lexikalische lokale variablen und dynamische globale variablen.
ggf. die globalen variablen
auch beim closen in die closure stecken, nur dann kann die closure ein array werden,
und man kann alle environment zugriffe durch array index zugriffe ersetzen.
parameter sollten dann auch slots im array sein, beim func call entsprechend abfuellen
-> umsetzung: beim closen nicht bei env sondern cdr(env) beginnen. das erste element ist das (null . nil) cons,
   erweiterungen werden dahintergezwickt. kann man per cmdline umswitchen.
   -> leider nein, das environment beim closen ist (lokalesenv globalesenv)

utils: combine, list, nth, nhtcdr, c*r

Hashmaps
-> make-hash-table
   get-hash key -> value

flag ob die identifier auf UC umgestellt werden sollen
flag fuer symbols:
--symbols=uc ... symbole werden beim lesen auf UC umgestellt
--symbols=ci ... symbole werden nicht umgestellt, aber case insensitive verglichen
--symbols=cs ... symbole werden as is verwendet, case sensitive verglichen

bei endcalls koennte man die parameter der aktuellen funktion fuer namensgleiche parameter nutzen: 
nicht alle argumente dranhaengen, sondern entweder dranhaengen oder bei gleichnamigen den alten wert ersetzen
wuerd ggf bei dynamic UND lexical closures was bringen
-> nein nur dynamic, lexical closures erben das environment ja nicht

Vielleicht doch set/setf/setq, vgl ABOUT LISP https://graham.main.nc.us/~bhammel/graham/lisp.html
rplaca, rplacd
Vielleicht ein "Imperative Paket" mit flags ein/ausschalten?

        if(car(exp) == s_define)                        // "define"
          return(extend_top(car(cdr(exp)),
                            eval(car(cdr(cdr(exp))), env)));
        if(car(exp) == s_setb) {                        // "set!"
          obj *pair   = assoc(car(cdr(exp)), env);
          obj *newval = eval(car(cdr(cdr(exp))), env);
          setcdr(pair, newval);
          return newval;
        }

am besten setf weglassen, weil das macht serious magic
-> set ... belegt den ersten gefundenen wert im environment neu. dynamic, lexical, global, halt dort, wos assoc zuerst findet
           beide argumente werden evaluiert
-> setq ... wie set aber das erste argument wird nicht evaluiert
-> rplaca, rpclacd http://clhs.lisp.se/Body/f_rplaca.htm
   rplaca cons object => cons
   rplacd cons object => cons



fehlende schliessende klammer wird IMMER mit der letzten zeile gemeldet
-> oeffnende Zeile merken und ausgeben



Datei IO
(pprint (read (open typ "/Users/ashokkhanna/lisp/test-pprint.lisp"))) ; typ koennte 'utf-8 oder 'ansi oder auch 'url oder 'ftp sein
-> datentyp File
-> funktion (open string...) -> File ; koennte eine menge pathelemente bekommen, setzt die mittels pathsep zusammen vgl NIO
            (close file) -> t
            (read-line file) -> String oder nil
            (read-all-lines file) -> (line...)
bringt aber nur was, wenns auch stringmanipulationsfunktionen gibt
-> string->charlist
-> (split splitchars sting) -> (elements...)

(load 'utf-8 "lispfile.lisp")
-> erster optionale parameter ist ein symbol fuer den Zeichensatz

Stringfunktionen: format kann auch strings zusammensetzen
strings sind eine LSIP sequence, fuer sequence gibts
-> subseq sequence start &optional end => subsequence

(concatenate 'string "all" " " "together" " " "now") =>  "all together now"
(concatenate 'list "ABC" '(d e f) #(1 2 3) #*1011)
=>  (#\A #\B #\C D E F 1 2 3 1 0 1 1)
(concatenate 'list) =>  NIL

CL hat stringp string= string<=, ...

LambdaJString.value von String auf char[] umstellen?
-> wuerde ggf. builtins rund um java.lang.Character erleichtern
-> char ist 16 bit
-> Java11 speichert String.value nicht als char[] sondern byte[], dieses Speicherersparnis waer dann verloren



In einer LISP Datei nach dem Ende einer Toplevel form koennten Daten stehen, die wuerden von read gelesen
-> Beispiel machen
LambdaJ> (write (read)) "Hello, World!"
"Hello, World!"
==> t





Generic S-Expression reader/ writer: (<n>:<octets>)

read koennte einen optionalen ersten string parameter als filename interpretieren und dieses file lesen
statt lispStdin, write sinngemaess, ggf. format und format-locale

in eval eine lokale variable result einfuehren, das wird vor dem return zugewiesen, dann kann finally den returnwert tracen

primitives fuer Environmentvariables und -D Java Systemproperties. wenns nicht existiert, gibts nil, wenns nicht als
double lesbar ist, gibts NaN
primitives fuer isNan, oder konstanten NaN, Infinity und (eq d NaN)

// Files can be loaded into the REPL
scala> :load /sites/repl-test.scala
Loading /sites/repl-test.scala...
res2: Int = 4
res3: Int = 6

-> vielleicht :save und (load <string>)


builtin oder special form fuer try/catch:
try = (lambda (func catch-handler finally) (
  try { return func(); }
  catch (Exception e) { return catch-handler(e); }
  finally { finally(); }
)





cadr, caddr, cadar, cddr, ... in eval verwenden und schauen, wieviel kleiner eval wird
-> solche primitiven wuerden auch Lisp programme schneller machen weil weniger assoc aufrufe
-> ein optimizer, der in define oder lambda reingezwickt wird, koennte (car (cdr o)) erkennen und durch (cadr o) ersetzen
   mit rekursivem abstieg muesste man nur current node und naechste stufe betrachten
   car/car  -> caar
   car/caar -> caaar
   car/cadr -> caadr
   car/cdr  -> cadr
   car/cdar -> cadar
   car/cddr -> caddr

   cdr/car  -> cdar
   cdr/caar -> cdaar
   cdr/cadr -> cdadr
   cdr/cdr  -> cddr
   cdr/cdar -> cddar
   cdr/cddr -> cdddr

beispiel, wie man einen logger einhaengen kann.

LambdaJError extends RuntimeException   ... abstract
Syntaxerror extends LambdaJError        ... nur eval
RuntimeError extends LambdaJError       ... nur primitives

k.a. wieviel die ConsCell casts bremsen
Alternatives Objectmodell mit weniger casts:

interface Value {
    default car() { throw new Error("not a cons"); }
    default cdr() { throw new Error("not a cons"); }
    String toString();
}

interface Atom extends Value {
    Object value;
    String toString() { return value.toString(); }
}

class ConsCell extends Value {
    Value car, cdr;
}

Value car(Value v) { return v.car(); }
Value cdr(Value v) { return v.cdr(); }
ConsCell cons(Value car, Value cdr) { return new ConsCell(car, cdr); }

nice to have: apply mit zuviel/ zuwenig args fuer ein lambda: ueberschuessige args koennten gemeinsam mit dem letzten als liste uebergeben werden,
fehlende als null.


Doku: ein Custom Parser koennte statt parsen eine Liste liefern (koennte z.B. hardcodiert
mit new ConsCell zusammengestoppelt werden) und intern() koennte mittels String.intern() umgesetzt werden.
Anmerkung: Symbols sind Strings, Stringliterale in der o.a. Liste sind bereits mit String.intern() bearbeitet,
  dazu passt die Umsetzung der Parsermethode intern() mittels String.intern()
Anmerkung 2: Lisp Strings werden als LambdaJString repraesentiert
Anmerkung 3: intern() mit einer HashMap waer auch nicht schwer

Doku: https://en.wikipedia.org/wiki/Peano_axioms enthaelt natuerliche Zahlen basierend auf Mengen,
koennte eine Anleitung sein, wie man Zahlen in einem Lisp ohne Zahlen umsetzen kann
0 = nil
1 = succ(0) = '(0) = '(nil)
2 = succ(1) = '(0 1) = '(nil (nil))
3 = succ(2) = '(0 1 2) = '(nil (nil (nil)))

addition:
(add (a b) (if (null? b) a (add '(nil a) (cdr b))) ; oder so aehnlich

multiplikation:
(mul (a b) (if (null? b) nil (add a (mul a (cdr b)))) ; oder so aehnlich


Clisp:
(setf zero ())                                ; -> zero = NIL

;(define (cons a b) (lambda (f) (f a b)))      ; define?
;(define (car c) (c (lambda (a b) a)))         ; define?
;(define (cdr c) (c (lambda (a b) b)))         ; define?

(defun succ (a) (cons zero a))                ; das geht

(setf one (succ zero))                        ; -> one = (NIL)
(setf two (succ (succ zero)))                 ; -> two = (NIL NIL)
(setf three (succ (succ (succ zero))))        ; -> three = (NIL NIL NIL)
(setf four (succ (succ (succ (succ zero)))))  ; -> four = (NIL NIL NIL NIL)

(defun add (a b) (if (eq b zero)
                     a
                     (add (succ a) (cdr b))))

(defun mul (a b) (if (eq b zero)
                     zero
                     (add a (mul a (cdr b)))))

;(write (add two three)) ; -> (NIL NIL NIL NIL NIL) aka six
;(write (mul four three)) ; -> (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) aka twelve
(write (mul zero three)) ; -> NIL aka zero

(defun true (a b) a)
(defun false (a b) b)
(defun my-if (a b c) (funcall a b c))

;(write (my-if #'false one two)) ; -> (NIL NIL) aka two


;(define and (lambda (p q) (if p q false)))    ; define?
;(define or  (lambda (p q) (if p true  q)))    ; define?



-> "intern" wird bremsen, koennte HashMap oder selber geschnitzte Open Hashing Map sein
   zumindest die Symbole wie lambda, labels,... nicht immer wieder internen, sondern deferred supplier
   -> symbole memoizen ist erledigt
-> der Lookup in env wird bremsen (jmh sagt: assoc braucht 40%), auf HashMap String->ArrayList umstellen ist nicht so trivial, weil
das Environment bei funcall staendig erweitert/ zurueckgesetzt wird (fuer funcall wird das environment erweitert,
dann gehts mit dem urspruenglichen weiter). Vielleicht eine Art Kette von Maps? funcall erzeugt eine neue Map die
einen link zum vorgaenger hat 

Zweiter Versuch:
Das Environment sieht nur der Java Code, duplikate sind verboten. HashMap muesste also doch gehen?!
Zugriff nur mit assoc und extend, extend schmeisst eine Excpeption, falls es das symbol schon gibt.
sogar set! muesste gehen?!
-> nein, geht auch nicht. beim aufruf von funktionen gibts schon duplikate, und nach dem return der funktion
   muss das environment wieder abgeraeumt werden, s.o.





Multithreading waer eigentlich nicht so schwer: solange nix geschrieben werden kann, braucht eigentlich nur die
Symboltable synchronized sein ?!?
-> und das environment?
 
Methoden ConsCell toList(), toArray(), toMap(), iterator(), stream()??? map() flatMap()
-> damit bekommt man Ergebnis-Daten raus am Ende des Lisp Programms
-> Wenn man dem Interpreter eine read Funktion ins Environment mitgibt, bekommt man auch Daten rein (abgesehen vom
Lesen von stdin). So eine read Funktion koennte z.B auch XML oder JSON nach ConsCells parsen
    -> iterator ist erledigt



(char-int C:character): integer expr ; Converts character to integer.
(int-char I:integer): character expr ; Converts integer to character.

The read syntax for characters objects is simple: #\ followed by the desired character. 





http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node149.html
list-length could be implemented as follows:

(defun list-length (x) 
  (do ((n 0 (+ n 2))            ;Counter 
       (fast x (cddr fast))     ;Fast pointer: leaps by 2 
       (slow x (cdr slow)))     ;Slow pointer: leaps by 1 
      (nil) 
    ;; If fast pointer hits the end, return the count. 
    (when (endp fast) (return n)) 
    (when (endp (cdr fast)) (return (+ n 1))) 
    ;; If fast pointer eventually equals slow pointer, 
    ;;  then we must be stuck in a circular list. 
    ;; (A deeper property is the converse: if we are 
    ;;  stuck in a circular list, then eventually the 
    ;;  fast pointer will equal the slow pointer. 
    ;;  That fact justifies this implementation.) 
    (when (and (eq fast slow) (> n 0)) (return nil))))



isNaN, isInfinite, isFinite
-> ggf. parameter "Error bei NaN, Infinity etc."
div, remain, trunc, round, abs
weitere operatoren aus java.lang.Math (oder StrictMath?)

irgendwie fliessen eval und apply ineinander. apply kann man mit eval implementieren, und umgekehrt?!



Vielleicht car, cdr, cons, ConsCell in eine Basisklasse LambdaJRuntime rausziehen?
LambdaJ koennte man als Lisp Programm sehen, das von Hand nach Java uebersetzt wurde,
und ein Lisp Programm verwendet Lisp Runtime wie car, cdr, ... .
Falls ein LambaJ Compiler kommt, wuerden erzeugte Java Programme dieselbe Runtime verwenden.
Fuer interpretierte Programme gibts die Builtin-Wrapper, die Parameter-Checks machen und
die Argument-Liste in Argumente wandeln.
-> public static nested class LambdaJRuntime + "import static LambdaJ.*"
   damit gaebs nur wenig Aenderungen in LambdaJ, und externer Code haette auch Zugriff mittels "import static LambdaJ.*" 

Falls Compiler, sollte der nicht nur ein Programm sondern z.B. *.lisp uebersetzen,
ggf. mit timestampcheck



(loop for thing in list
   do (if (numberp thing)
          (format nil “I’m a number: ~a~%” thing)
          (format nil “Not a number!~%”)

(defun factorial(x)
  (reduce '* (loop for a from x downto 1 collect a)))



(write (((lambda () (lambda () (quote (1 2 3))))))) ; geht nur in scheme siehe apply.lisp





JDBC vielleicht objectorientiert anbinden?
funktion nativequery bekommt eine datasource, einen SQL string und eine Liste mit (parameternameatom . wertexpression) tupeln

nativeinsert koennte fuer batchinserts eine Liste von listen mit (parameternameatom . wertexpression) tupeln bekommen und eine liste 
mit ints liefern (ein int für jede insert-tupel-liste)





Doch (noch) nicht:
==========================================

builder pattern:
withStdin(...)        // entweder einen char supplier oder einen ObjectReader
withStdout(...)       // entweder einen String consumer oder einen ObjectWriter
withCustomEnv(...)    // Parameter ist ein Supplier<ConsCell>, der erzeugt eine Liste mit (symbol . builtin)
                      // und wird in der Init Phase aufgerufen
withTrace(Tracer)     // z.B. System.err::println
withTty()             // Shortcut/ convenience: benutzt System in/out/err, kein Custom Env
obige methoden liefern ein Interface "LambdaJBuilder" OHNE interpret aber mit build()
build()               // bastelt alles zusammen und liefert ein Interface "LambdaJ" mit interpret(), withStdin(), withStdout()
interpret(...)        // entweder einen char supplier oder einen Parser, oder ein String?!

eine map builtinfunc->name damit printObj die funktionsnamen ausgeben kann?
zweite map fuer FFI funktionen s.u.?

Wenn ConsCell geeignet annotiert ist, sollte jaxb dann XML nach Lists parsen koennen? XML schreiben muesste supereinfach sein?!
-> es braucht viele annotations und public noarg constructors, zawos brauchma des

lisp write liefert als ergebnis den parameter
-> LambdaJ liefert (quote t)

Lambda erweitern, sodass es implizites currying wie in Lambda Calculus unterstuetzt wird?
vgl. https://old.reddit.com/r/learnlisp/comments/izq5fs/how_to_implement_basic_lambda_calculus_operators/g6kikqp/
(define xyzzy (lambda (a b c) (+ a b c)))
(xyzzy 1 2) ; liefert einen fehler, koennte aber ein closure mit a und b und code: (lambda (c) (+ a b c)) liefern

-> makeArgList muesste als ergebnis eine Liste mit 2 Listen liefern: das extenv mit den arguments + liste mit verbleibenden params
   -> wenns keine verbleibenden params gibt, wird die funktion ausgeführt, gibts verbleibende args,
      ist der returnwert ein lambda mit den verbleibenden params. 
-> nur sinnvoll bei lexical closures, weil sonst gingen ja die bereits gesetzten argumente verschuett 

  -> erst mal nicht, currying/ variadic functions, default arguments passen schlecht zusammen

continuations: loops gibts ja keine, ist eine continuation einfach der restliche parse tree? 
ist currentcc cdr(exp) (und das env bzw. closure) ?
-> es koennte eine special form current-continuation geben, angelehnt an lambda, current-continuation haette eine parameterliste,
   aber keinen stmt body. ergebnis von (current-continuation (a b c)) waere ein lambda (lambda (a b c) ...), ... steht fuer
   jene automatisch eingefuegten stmts, die auf den aufruf von current-continuation folgen. d.h. wenn jemand dieses lambda aufruft,
   gehts mit den stmts weiter, und die symbole a b c sind mit werten belegt im environment (d.h. closure) vorhanden.
   -> geht zunaechst aber nur innerhalb einer flachen liste stmts eines lambdas, nicht z.b. innerhalb des true zweigs einer if-clause.
      -> damit das auch geht, muesste man die stmts die der gesamten if clause folgen, auch ans lambda dranhaengen
         -> das waer moeglich, wenn man bei jedem rekursiven oder tailrekursiven aufruf von eval eine verkette liste mit cdr(exp)
            als parameter mitgibt, bei jedem aufruf wird die liste eins laenger. um dann das continuation lambda zu basteln,
            haengt man diese stmt liste an eine kopie von cdr(exp) dran. haette z.b. zur folge: wenn nur im true zweig call/cc
            aufgerufen wird, dann sind die parameter nach der if clause bei durchlauf durch true zweig vorhanden,
            beim durchlaufen des false zweigs nicht vorhanden.
         -> Aufrufe einer Continuation sind effektiv Endcalls
            Nein, sind sie nicht, wenn die gerufene Continuation einfach endet, entspricht das einem return.
            CPS waer ggf. moeglich und nicht so schwer?!?

print/ pprint/ princ/
-> die setzen parameter und rufen write, write kennt viele parameter zur formatierung, siehe
   http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm

Environment variable fuer default options
-> aufrufscript stattdessen

sollte format write aufrufen statt direkt zum lispwriter zu schreiben? write koennte erweitert werden, dass es *print-pretty* usw.
auswertet
-> nein, format ruft #printString, write ruft #printObj, format schreibt, was der user im formatstring spezifiziert
   write schreibt entsprechend allfaelliger globalen variablen/ argumenten

vielleicht doch eine option fuer eol, die interpreter UND compilierte programme auswerten? default ins kompilierte programm reinschreiben?
oder endlich filevariables, die wuerden auch ins kompilierte programm reingepatcht
-> oder so lassen, weil interpreter, compiler und kompilate die System property line.separator auswerten





Erledigt:
==========================================

welches ergebnis liefert lambda mit einer liste als body?
-> sollte ergebnis der letzten form sein

Klasse Builtin statt UnaryOperator<Pair> einfuehren

eq vergleicht identitaet, was macht Lisp? https://stackoverflow.com/questions/547436/whats-the-difference-between-eq-eql-equal-and-equalp-in-common-lisp
-> checken ob das passt, z.b. (eq (cons (quote 1) (quote 2)) (cons (quote 1) (quote 2))) ist nicht identisch aber gleich (?)
-> GNU CLISP v2.49+ liefert NIL

Eine JUnit funktion, die liest alle lisp files aus einem verzeichnis und führt sie aus.
erwartetes Ergebnis bzw. fehlermeldung steht in der datei in einem kommentar drin, z.B.
; result:(1 . 2)
oder
; error-prefix: SyntaxError in line 12:
und ggf.
; output: Hallo Welt

Lambda -> LambdaJ

Vielleicht in printObj umlenken:
(quote t) -> "t"
null -> "nil"

beim scannen zeile und spalte mitzaehlen und in fehlermeldung einbauen

apply fuer lambdas, siehe apply.lisp

verschiedene konstruktoren fuer Pair und ueberladene cons brauchts wahrscheinlich nicht, cons(Object,Object) muesste reichen

builtin write-line
-> common lisp hat das, parameter muss aber ein string sein

Datentyp double, (nicht int) unterstuetzen

eq fuer number korrigieren
-> oder eq lassen und = einfuehren, achtung beim vergleichen von double!
-> vielleicht = mit optionalem drittem double parameter fuzz fuer die genauigkeit

+ - * / %, factorial beispiel

car, cdr umstellen dass sie Object uebernehmen
-> dann gibts einen cast in car/cdr statt 1000 casts ueberall

vielleicht "Object car(Object)" und "Pair pcar(Object)"?
-> Eruebrigt sich ggf. durch Umstellen von car(Pair) nach car(Object) 

die parameterchecks ignorieren zuviele argumente

numberp, ggf. atom korrigieren
symbol? vs atom vs numberp

<, >, usw checken ob Double#compareTo Vorteile bzgl. NaN und +- 0.0 hat, derzeit passiert Unboxing

tests fuer atom, consp, listp, symbolp, numberp

test fuer eval nil und eval t, ggf. symbol t einfuehren

tests und fehlertests fuer number und operatoren

numberp() ggf. teilweise durch atom() ersetzen, dann koennen externe Builtins ihre eigenen Datentypen
in car reinstecken, der Interpreter sieht und verarbeitet nur Object

errortests fuer lambda/ builtin mit zuviel/ zuwenig parametern aufrufen

errortests fuer fehler wie erster parameter fuer lambda ist keine symbolliste

Sollen die interpret...() Methoden einen String oder ein Objekt zurueckgeben?
Vielleicht Object zurueck, und ConsCell bekommt eine toString() Methode basierend auf printObj?

Scanner/Parser in eine Klasse rausziehen, je ein Objekt ProgramParser und InputDataParser,
die Lisp Funktion read verwendet den InputDataParser.
Symboltabelle zu geeigneten Zeitpunkten auf null setzen, wahrscheinlich im Konstruktor der ScannerParserKlasse

if(!strcmp(token, "\'")) return cons(quote, cons(readobj(), nil));

isParen und isQuote nach isSyntax zusammenziehen



Tail recursion erkennen: es wird eine Funktion aufgerufen, die im environment 1 hoeher ist (?)
oder wenigstens loop einbauen
-> einfacher ists alle tailcalls zu optimieren

eval hat einige endrekursive aufrufe. koennte man eliminieren.
vielleicht noch einen zweiten levelzaehler einfuehren, dann kann man den level fuer eval und (kleinere) rekursionstiefe anzeigen

eigentlich passiert die rekursion ja in eval:
evlis, evcon & co inline expandieren, und das letzte listenelement nicht mit rekursion aufrufen sondern
manuell tail recursion elimination machen.

PROBLEM: function calls haben ein geaendertes environment extenv
-> einen stack aus extenvs aufbauen: ein int "stackarray" in dem merkt man sich, wieviele elemente vorne
drangepickt wurden und nach verarbeiten des calls entfernt werden müssen 

dann werden nicht nur tail rekursionen wegoptimiert, sondern alle tail calls. es ruft zwar die eine Lisp funktion
eine andere auf, aber in wirklichkeit laeuft nur der code der einzigen Java-methode eval. 



eval, evlis, evcon vielleicht in haendischem CPS?!?
-> eruebrigt sich durch TCO

Erkennung von zirkulaeren Listen koennte man in printObj einbauen
-> aber ohne set gibts derzeit eh keine zirkulaeren Listen ?!?)
-> contains self aber schon

printObj auf loop umbauen, "sich selbst enthalten erkennen", vgl collection.toString()

"t" aus/ einschaltbar machen: flag "HAVE_TRUE"
-> falls true  -> t in der symbol table und _expTrue = t
-> falls false -> t nicht in der symbol table und _expTrue = (quote t)

Numbersupport mit flags ausschalten?
Optional BigDecimal statt Double?

fnull, fcons usw brauchen keine members zu sein, koennten lokale variablen in environment() sein
-> vorher environment() aufteilen?

der Double Support ist eigentlich nur mittels Builtins umgesetzt
-> in ein eigenes ExtEnv verpacken, damit kann mans optional machen,
   oder alternativ/ zusaetzlich z.B. BigDecimal unterstuetzen
-> UND im Lexer gibts Support fuer Double

--help

Datentyp Strings unterstuetzen
-> laenger als SYMBOL_MAX=32

Strings und Characters braucht eigentlich nur der Scanner, Parser (readObj) und Builtin Funktionen (inkl printObj!!!) kennen.
Strings, Chars und Symbols sind alles Atoms, aber nur Symbols sind in der Symboltable

Parser refactoren:
LispParser bekommt statt InputStream einen IntProducer:
fuer InputStream in:
    () -> in::read
oder fuer StringReader s:
    () ->  s::read

readObj umbauen dass (a . b) eingelesen werden kann?

Builtins sollten ggf. expression mitbekommen fuer ausgabe von fehlermeldungen

printObj sollte symbols mit syntax als |xxx| printen. Was syntax characters sind, weiss nur der Parser
-> printObj als Methode von Parser, naechsten punkt umsetzen!

Builtins sollten ggf. parser (symboltabelle) und ggf. environment mitbekommen, dann koennten sie static sein,
waer ggf. besser fuer custom builtins
-> builtins mit env koennten late binding machen
-> builtins muessen printObj des parsers verwenden
-> environment() koennte static sein

!!!!!!! Alles falsch: Syntax characters bestimmt der ObjectWriter.
Builtins sollten Symboltabelle, ObjectReader in, ObjectWriter out, ggf. Tracer, ggf. Environment bekommen

write sollte ObjectWriter.printObj() verwenden,
zum Tracen weiterhin das statische printObj verwenden
-> LispParser (eigentlich ObjectWriter, s.u.) bekommt methode printObj, bisherige statische Methode printObj in traceObj umbenennen oder printSExpression 
-> write schreibt im gewuenschten Format, Errormessages sind im Format S-expression
-> Syntax characters von S-expressions als static Konstante von LambdaJ rausziehen,
   dann kanns Lispparser und das statische printObj verwenden



getrennter Reader fuer read
-> Object interpret(Supplier lispSource, Supplier lispStdin, Consumer lispStdout, Supplier<ConsCell> customEnvironment)
-> oder LambdaJ in Builder Pattern umbauen:

interface ObjectReader { Object readObj(); }
interface SymbolTable { String intern(); }
interface Parser extends ObjectReader, SymbolTable

interface ObjectWriter { String printObj(Object o, boolean headOfList, boolean eol); }
class LispParser implements Parser, ObjectWriter

interface Tracer { void println(String); }

FFI: eine special form "extlabels". funktioniert aehnlich wie labels,
aber statt funktionsdefinitionen gibt man einen Klassennamen an (und vielleicht ein zusaetzliches optionales namenspraefix,
damit man im falle von gleichnamige methoden in zwei klassen "namespaces" zum trennen verwenden kann), und
von dieser klasse werden alle public methoden mit der Signatur UnaryOperator<Pair> ins Environment gesteckt.
Oder statt reflection: "extlabels" bekommt den Namen einer statischen methode die liefert eine Map Funktionsname->UnaryOperator<Pair>

Oder: LambdaJ bekommt eine Methode void registerBuiltin(String funcName, Builtin javaFunc), die pickt eine neue
Funktion ans Environment vorne dran.
Oder: zus. Parameter ConsCell extEnv, damit kann man eine Liste mit zusaetzlichen Builtins mitgeben



primitive string-format-localized: erster parameter ist locale, z.B.
(format-string-localized "en-US" "%g" 1)

evlis/ evcond sollten auch was tracen. stackanzeige erhoehen, evallevel nicht
einrueckung basiert auf javastackzaehler, anzahl sterndaln evallevel - javastackzaehler

apply erlaubt nur 2 argumente, sollte aber 2+ akzeptieren (und gegen parameterliste checken?)
siehe apply3.lisp
laut http://www.n-a-n-o.com/lisp/cmucl-tutorials/LISP-tutorial-20.html:
(apply #'+ 3 4 '(3 4))
Apply is just like funcall, except that its final argument should be a list; the elements of that list are treated
as if they were additional arguments to a funcall.
-> apply ist komplett hinueber

(write " ") schreibt " " inkusive der double quotes
-> vielleicht write-string und write-line

Escapig von " ", ', \ ...
SExpWriter sollte so schreiben wie SExpReader liest, d.h. mit escaping
ConsCell.toString() sollte nicht escapen
todo gelesen wird ein Symbol he\(lo, geschrieben wird |he(lo|

Wenn eine Funktion labels oder cond enthaelt, werden tailcalls effektiv nicht wegoptimiert, weil evlabels bzw. evcond
auf den Java stack kommt. "if" ist in eval inline drin, deswegen funktioniert TCO trotz "if".

environment umsortieren

eval braucht keine elsif Kette sein: in jedem if gibts return oder continue

applyPrimitive (2x) in eval in ein try/catch wrappen, im catch:
throw new LambdaJError(e.getMessage + expError(exp))
-> damit sieht man in welcher expression z.B. argumente nicht passen

evlabels inlinen und TCO

performance: benchmarken
warum ist das environment eine liste von listen statt eine liste von cons cells

am ende wird stack und nesting getraced falls TRC_EVAL.
-> TRC_STATS statt TRC_EVAL, zusaetzlich walltime, cpu und anzahl ConsCells tracen.

in dbeval die groesse des environment ausgeben. wahrscheinlich waechst das bei rekursion. 

statt dbgEval -> if (trace >= TRC_EVAL) dbgEval
und die if clause aus dbgEval weg

ggf mit :init altes environment vergessen

im main loop: parsen und checken, ob obj.toString = :w oder = :q ist, so koennte man befehle für den REPL ausserhalb Lisp einbauen

lexikalische closures

lexical closures muessten gehen, indem man das env mit dem lambda mitspeichert und beim aufruf des lambda 
nicht das aktuelle env extended sondern das abgespeicherte
-> umsetzen, indem "lambda" nicht ein lambda ins environment steckt sondern "closure" 
   (oder doch ein lambda und die liste enthaelt nicht nur ("lambda" args body) 
   sondern ("lambda" args body closure), mit nullcheck entscheiden, 
   ob lambda oder closure ausgefuehrt wird. und eval() erweitern, dass closure wie lambda verarbeitet wird, 
   aber statt aktuellem env die closure mit args erweitert
-> mit befehlszeilen parameter --dyn umstellen

labels gehen mit lex clos nicht: im closure sind die labels nicht drin

trace auf final int trace umstellen und im Konstruktor belegen

pfx() und sfx() zusammenziehen, werden immer gemeinsam aufgerufen

' ist wsl falsch: sollte alles rekursiv quoten, derzeit machts nur ein einziges (quote...
-> eher ist apply falsch

der code von apply und functioncall ist fast identisch:
-> makeArgs umbauen, dass kein eval gemacht wird
-> apply macht die args mit eval, functioncall mit evlis
-> mit einigen weiteren umbauten kann functioncall nach apply springen
---> oder beide setzen ein neues 

"enter an expression, enter :h for command help or :q to exit"

defun einbauen, weil define alleine ist muehsam
oder doch defun als macro und macros unterstuetzen?
(defmacro defun (sym params body) (define sym (lambda params body)))

statt Xmal boolean HAVE_xxx
-> ein final int features das im Konstruktor von LambdaJ belegt wird
   static final int HAVE_XXX = 1 << 1,2,3,4...
   methoden boolean haveXXX()
   -> den wert fuer features muss man vorher mit | zusammenbasteln
      zur laufzeit sollten die haveXXX methoden (fast) wegoptimiert werden, wenn features final ist

Bespiel Parser liest serialisierte Objekte, intern ist String.intern()

checken ob die string funktionen geeignet ein/ausgeblendet werden

interpreter bekommt eine methode init()
interpret() überladen das kein neuer parser uebergeben wird. damit kann man immer wieder interpret() aufrufen und defines bleiben bestehen

die sSymbol.get() gschichte ist total overengineered, besser das lazy loading ganz weglassen (ausser vielleicht bei exptrue lassen)

ConsCell hat 4 byte platz wg alignment. man koennte ein int mit typ machen statt LambdaJString und instanceof.
CONS=0 PRIM = 1 LAMBDA=2 CLOSURE=3 ATOM=10 SYMBOL=10 STRING=11 CHAR=12 DOUBLE=12
isAtom() { return typ >= ATOM }, dann koennte custom code seine eigenen typen erfinden.
solange die neuen typnummern >= ATOM sind, sieht der interpreter alles als atom
-> geht doch nicht so: das flag wird nicht bei ConsCell gebraucht, sondern bei den values, die als Object car oder cdr gespeichert sind
-> fuer closure genutzt


primitives format und format-locale: erstes bzw. zwei erste args sind strings, schreiben nach lispStdout

        ThreadMXBean threadBean = null;
        long startCpu = 0L;
        long start = 0L;

            threadBean = ManagementFactory.getThreadMXBean();

            if (threadBean != null) {
                startCpu = threadBean.getCurrentThreadCpuTime();
            }
            start = System.nanoTime();

Variable INTERNAL-TIME-UNITS-PER-SECOND
Builtins GET-INTERNAL-REAL-TIME, GET-INTERNAL-RUN-TIME, SLEEP

define/defun

nil in der symboltabelle als Java null ist fishy, weil symbol nil == null false ergibt
deswegen ist auch der hack in eval bei funktionsaufruf notwendig
-> vielleicht reichts doch, im parser umzulegen? aber was ist im modus ohne nil, aber vielleicht ists dann eh kp

bei cond wird nur das erste stmt ausgefuehrt

LambdaJError(String, Object...) + ggf. Stringkonstanten am anfang der Klasse

in setsymtab nur die symbole erstellen, dies laut features geben soll (if have...)

nCells nicht static, statt im Konstruktor in cons und cons3 schreiben

File mit einigen Expressions als sample session herrichten, sample session mit
  java -jar lambdaj.jar < sample-session.lisp > transcript.txt
erzeugen.
-> flag --prompt einbauen, default fuer tty = true, !tty = false
-> eine sample session mit allen sprachmitteln und kommentaren koennte ein ausfuehrbares reference manual sein
-> aber nur, wenn jede eingelesene zeile auch auf den schirm zurueckgeschrieben wird
   -> parameter --echo und --no-echo
   -> echo koennte umgesetzt werden, indem main SExpressionReader ein Lambda uebergibt, das nicht nur liest sondern ggf. alles
      gelesene auch schreibt
   -> --prompt koennte umgesetzt werden, indem main nicht direkt nach stdout schreibt sondern in ein lambda, das schreibt oder nicht
      oder entweder nach --prompt: (s-> System.out.print) oder --no-prompt: (s-> return)

dotted lists werden entweder nicht richtig glesen oder geschrieben
soll:
'(a . b)              ; (A . B)
'(a . (b . (c . d)))  ; (A B C . D)
'(a b c . d)          ; pprint: (A B C . D)
'(a . (b . (c . ()))) ; (A B C)
'(a b c)              ; (A B C)

LambdaJ ist fast ein Subset von CL, Unterschiede zu CL dokumentieren, am besten ein kurzes Manual mit allen Sprachmitteln
und ggf. Unterschieden
oder ein builtin "help": (help) listet alle special forms und builtins nach lispStdout, (help symbol) schreibt eine Beschreibung
zu "symbol" nach stdout

im repl wird zeile/char immer weitergezaehlt

writeln umbauen auf "\n<string> "
-> mit param
--eol=LISP
--eol=C

http://www.lispworks.com/documentation/HyperSpec/Body/f_get_un.htm
get-universal-time <no arguments> => sekunden seit 1.1.1900
get-decoded-time <no arguments> => second, minute, hour, date, month, year, day, daylight-p, zone

progn fuer if und anderes?
-> nach schema lambda und fallthrough. in zip() shortcut einbauen: if paramlist == null && arglist == null return

vielleicht doch ein let? das waer ein lambda, das die uebergebene funktion in ein lambda mit den werten verpackt
  oder eine special form die nur das environment erweitert und dann "env=extenv; continue;"
-> let muss eine fexpr sein, special form oder macro, oder doch nicht? ja, sonst wuerden die variablenlisten ausgefuehrt
-> oder define setzt werte im aktuellen env
-> nur letrec als special form. letrec ist die obermenge von let und let*

letrec so wie labels umbauen, dass allfaellige closures alles andere sehen, nicht nur die vorher deklarierten

let*

named let* und letrec
named let: gibt dem body einen namen, damit er sich rekursiv aufrufen kann. waer leicht moeglich, das in letrec einzubauen (if symbolp(car(arguments)))
(define (number->list n)
  (let loop ((n n)
             (acc '()))
    (if (< n 10)
        (cons n acc)
        (loop (quotient n 10)
              (cons (remainder n 10) acc)))))

muss man bei named let immer alle parameter befuellen?
-> in scheme ja

-> number operatoren auf long erweitern
   div: integer division, rem: rest
   numberp erweitern
   floor, ceil und round

printSEx umbauen, dass es statt stringbuilder einen Consumer<String> uebernimmt, zum schreiben in file

eval wird IMMER mit stack+1/level+1 aufgerufen
-> +1 bei den aufrufen weg, am anfang von eval machen

define und defun sollten ggf das symbol liefern

eval ins environment einhaengen?
-> The main reason for beginners is: you don't need it. https://stackoverflow.com/questions/2571401/why-exactly-is-eval-evil

environment erweitern: statt cons(null, null) -> extenv = append(obj, extenv)

try/ catch für javacode in eval statt in d, weil da kann man in der Fehlermeldung die Expression ausgeben

statt der for (list) schleifen den iterator benutzen, sollte dotted list und circular handeln

der Parser koennte integer auch parsen, ggf. auch char, long, biginteger, bigdecimal mit irgendeinem praefix gekennzeichnet. 
sind alle Number, k.a. ob das beim erweitern der operatoren was bringt
-> in den Operatoren ((Number)x).doubleValue zum Rechnen, ergebnis muss dann ggf. auf den richtigen typ gebracht werden
   / ergibt immer double, bei *+/mod haengt der ergebnistyp von den eingehenden typen ab
-> dann bräuchte man wohl auch typumwandelfunctionen, sonst stellts string-format auf, wenn man nicht mehr weiss was man hat

Long im parser unterstuetzen
-> parser geht, cmdline switches + dok fehlen
statt double number dreht double und long auf/ ab, no long dreht ggf. long ab

topEnv kann ein member sein, nicht immer rumreichen, stack detto, mit bisserl aufwand auch level
-> stack und level bleiben params, das sind eigenschaften der methode eval

http://www.lispworks.com/documentation/HyperSpec/Body/f_dec_un.htm
decode-universal-time universal-time &optional time-zone => second, minute, hour, date, month, year, day, daylight-p, zone

FFI: methoden
Object getValue(String globalSymbol)
Object apply(String func, Object... args)

und/ oder

interface MurmelFunction { Object apply(Object... args); }
MurmelFunction getFunction(String func) {...}
Object         getValue(String globalSymbol)

Java FFI:
JSR-223 (Java scripting API)

https://stackoverflow.com/questions/46611132/how-i-merge-lisp-and-java-or-how-i-run-lisp-code-using-java
Interpreter interpreter = Interpreter.createInstance();
interpreter.eval("(load \"my-lisp-code.lisp\")");

Symbol myFunctionSym =
          defaultPackage.findAccessibleSymbol(
               "MY-FUNCTION");
     Function myFunction =
          myFunctionSym.getSymbolFunction();
Cons list = 
          (Cons) myFunction.execute(
                        Fixnum.getInstance(64),
                        Fixnum.getInstance(64));

trace und features in 2 methoden rausziehen

(cons 'a . 'A) -> (a . a)
-> dokumentiert, kein wirkliches problem, nur kosmetische eher positive auswirkung

buitlin apply-java: erster parameter ist ein string statt symbol, d.h. die expression fuer das erste argument muss einen String liefern,
das ist dann der Name einer Klasse und/ oder statischen Methode. Ggf. auch eine statische Methode,
die ein Function<ConsCell,Object> Javalambda liefert.

Vielleicht operator # fuer Javacalls? # wie in javadoc, oder :: wie in methodenreferenzen (waer cooler, moderner)
-> # hat in CL schon eine Bedeutung, z.B. #\C

(define my-map (:: new java.util.HashMap nil))
(:: "put" "java.util.HashMap" my-map "my key" "my value")
(:: "format" "java.lang.String" nil "%g" 1.0)
erster parameter methodenname, zweiter klassenname, dritter objektreferenz oder nil fuer statische methoden, der rest sind parameter fuer die methode
primitive :: koennte durch eine klasse mit methodencache implementiert werden

oder :: erzeugt ein Primitive-Objekt, das Klasse, und Methode enthaelt und spaeter wie eine normale Lisp Funktion aufgerufen
werden kann (aehnlich wie lambda ein closure erzeugt):
(define make-java-map (:: "new" "java.util.HashMap"))
(define java-put-hash (:: "put" "java.util.HashMap")

(define my-map (make-java-map nil))
(java-put-hash my-map "my key" "my value") ; erstes Argument beim Aufruf von "Java-Methoden" ist immer das Java-Objekt, ggf. nil fuer statische Methoden

symbol vielleicht nicht als String sondern class LambdaJSymbol { char[] symname; }, dafuer LambdaJString weg -> stattdessen java.lang.String
-> murmel muss sonst Java string argumente mit symbol abfuellen und Java return String liefert ein symbol (das es nicht gibt)
-> spart eher speicher

parameterchecks fuer letrec

LambdaJ gibts schon. Ausserdem gibts:
JavaLISP, http://jlambda.com, jlisp, rlisp, ROMALISP
-> umbenamsen:
   Murmel: ich mag das tier, murmeln <->-lispeln, Sprache: Murmel, interpreter: jmurmel
   JUCL: Java Un Common Lisp, uncommon Lisp klingt negativ

Vielleicht doch die Zeilennummer in ConsCell speichern fuer Fehlerausgabe?
vielleicht ein --debug flag, dann allokiert der parser andere ConsCells mit zeilennummern?
und printSEx bekommt einen parameter "lines" damit errorexp objekte mit zeilennummern ausgibt
oder LambdaJError bekommt einen zusaetzlichen parameter errorExp und gibt die errorExp aus mit oder ohne zeilennummern
-> ConsCells mit zeilennummern koennte der parser eigentlich immer erzeugen, code gibts nicht so viel, und die daten
   werden dadurch nicht vergroessert

scanner sollte | fuer symbole koennen
oder keine | schreiben
-> "print-read consistency" (a term given in ANSI CL, 2.3.6, in the context of symbols and packages),
   which refers to the concept of objects being printed in a machine-readable way, so that when the
   printed representation is scanned by the reader, a similar object is produced.

die primitive "list" ist trivial: einfach das argument liefern, das ist die variable "arguments" in eval, und das ist bereits genau
die gewuenschte liste

wenn formale parameter eine dotted list sind, wird auf den letzten parameter eine (moeglicherweise leere) liste mit den restlichen argumenten gebunden
-> variadic function mit zumindest einem parameter, scheme machts so
-> checken was passiert, wenn statt einer parameterliste nur ein symbol steht. das koennte dann eine variadic function sein die 0 oder mehrere args schluckt:
   alle argumente werden in eine (ggf leere) liste verpackt und an das einzige parameter symbol gebunden

define hat varargs, defun nicht


statt intern(new LambdaJSymbol... -> genSym(String...
-> das checkt unique symbols und reserved keywords

reserved words einbauen: vgl. Evolution of Lisp, pp 62 ff
-> NIL may not be used as a function, nor as a variable
-> T may not be used as a variable.

redefinieren der symbole von special forms verbieten? auswirkung hats eh keine.
->
special forms werden nicht im environment gesucht, die verarbeitung ist hardcodiert
die auswirkung davon laesst sich durch folgendes symptom beschreiben:
effektiv sind die symbole von special forms in einem eigenen namespace wo operatoren zuerst gesucht werden
(define eval 1) -> eval
(eval eval) -> 1
(eval 'eval) -> 1
vielleicht zumindest insofern reparieren, dass fuer die keywords symbole angelegt werden, dann gibt define einen fehler
und es gibt keine sonstigen auswirkungen mehr
-> aber let & co lassen das redefinieren trotzdem zu

ueberlegen, was special form und was primitive ist und was in der reserved word liste landet
-> primitives sind symbols im global env, die koennte man in lambda params und let bindings benutzen
   special forms funktionieren nicht als let bindings und muessen in die liste
   sprachelemente wie eq, cons, car, cdr koennte man als primitive umsetzen, oder aus performancegruenden als special form
   -> notwendige special forms plus "wichtige" primitives in die liste plus t und nil

vielleicht doch ein sprachmittel um gezielt dyn od lex closures zu erzeugen
-> vielleicht mit self evaluating symbol dynamic (self evaluating weil dann kann man quote oder nicht, ist egal)

tests fuer dynamic lambda

tests fuer lambda mit mehreren stmts
-> dynamic_lambda.lisp

vielleicht die feature flags nur im repl, sonst file variablen
-> file variablen als kommentare vor anderen syntaxzeichen, gleich im kommentarloop im scanner auswerten, der setzt featureflags
   beim setInput() die featureflags wieder zuruecksetzen
zumindest --lex ausbauen und --dyn -> --X-dyn mit warning (nicht mehr Murmel, auch kein subset)
vielleicht alle sprachflags -X-... und --dyn-> -XX-dyn

dzt gibts let* und letrec
-> let dazu, damit in den binding forms das umschliessende environment inkl globals garantiert sichtbar ist
   braucht man zum macros programmieren
-> was ist letrec*

soll bei named letXX das let-symbol in den bindings sichtbar sein?
-> CL hat kein named let
   scheme hat nur named let, kein named let* letrec, body symbol ist in den binding expressions unbound
    -> rausfinden was die nachteile von named let* und letrec sind
    -> rausfinden was die nachteile von named binding in binding expressions sind 


https://docs.racket-lang.org/reference/let.html
https://groups.csail.mit.edu/mac/ftpdir/scheme-7.4/doc-html/scheme_3.html#SEC31

LET: Lisp, Scheme, Racket   Murmel hats nicht
(let ((symbol form)...) bodyform...) -> object
* form sieht nur umschliessendes environment
* bodyform sieht umschliessendes environment und symbols

(let ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
((lambda (s1 s2 s3) bodyform)
  (eval form1)
  (eval form2)
  (eval form3))


NAMED LET: Scheme, Racket      Murmel hats nicht
(let bodysymbol ((symbol form)...) (bodyform)...) -> object
* symbols muessen unique sein
* form sieht nur umschliessendes environment
* body sieht umschliessendes environment, symbols und bodysymbol


LET*: Scheme, Racket       Murmel hats korrekt und zus NAMED LET*
(let* ((symbol form)...) (bodyform)...) -> object
* the symbols need not be distinct; later bindings shadow earlier bindings.
* form sieht umschliessendes environment und vorangegangene symbols (definiert)
* body sieht umschliessendes environment und symbols

(let* ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
(let ((s1 form1))
  (let ((s2 form))
    (let ((s3 form3))
       bodyform)))
->
((lambda (s1)
      ((lambda (s2)
            ((lambda (s3)
                  bodyform)
                (eval form3)))
          (eval form2)))
    (eval form1))


(letrec ((symbol form)...) (bodyform)...) -> object
* form sieht umschliessendes environment und alle symbols (undefiniert)
* body sieht umschliessendes environment und symbols

(letrec ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
(let ((s1 *undefined*) (s2 *undefined*) (s3 *undefined*))
  (let ((_x_ (eval form1)) (_y_ (eval form1)) (_z_ (eval form1)))   ; unique identifiers
    (set! s1 _x_)
    (set! s2 _y_)
    (set! s3 _z_)
    bodyform))


Racket letrec == Scheme letrec*
(letrec* ((symbol form)...) (bodyform)...) -> object
* The ids must be distinct according to bound-identifier=?.
* form sieht umschliessendes environment und alle symbols (vorangegangene definiert, eigens und folgende undefiniert)
* body sieht umschliessendes environment und symbols

(letrec* ((s1 form1) (s2 form2) (s3 form3)) bodyform) -> object
->
(let ((s1 *undefined*) (s2 *undefined*) (s3 *undefined*))
  (set! s1 (eval form1))
  (set! s1 (eval form1))
  (set! s3 (eval form1))
  bodyform)


-> am besten:
   named letX bleibt weil let loop
   let dazu
   let* bleibt
   letrec* ist anders als scheme: in scheme sehen die let forms alles als bound aber folgende als undefined


dynamic dokumentieren

Unterscheiden: Symbol gibts nicht vs. hat keinen Wert zugewiesen: not bound vs. undefined
-> besseres wording: bound/not bound, defined/bound but not defined
-> spielt eigentlich bisher nur bei letrec eine Rolle
   special forms boundp und definedp, spezialwert "Object undef" einfuehren und in symbol lookup auswerten

statt reserved=cons(symbol, reserved)
-> reserved(Symbol)

primitives nach haeufigkeit umsortieren

These are your father's parentheses
Elegant weapons
for a more... civilized age.

in readme.md nur einfache beispiele, rest in features.md und verweis auf langref

format und string-format zusammenziehen:
-> format t <string> schreibt auf stdout, return wert ist <string>
-> format nil <string> schreibt NICHT auf stdout, return wert ist <string>
-> format-locale und string-format-locale detto

string-format und format doch zusammenziehen:
(format nil "~A, ~A!" "Hello" "world")   ; => "Hello, world!"    schreibt nix, liefert den string
(format t "~A, ~A!" "Hello" "world")     ; => NIL                schreibt nach stdout und liefert nil

behandlung von nil beschreiben (Lisp <> Scheme)

alles geparste in main merken, und mit :w in eine datei schreiben und/ oder zumindest mit :l auflisten
weitere debug gschichten wie zb :env fuer environment auflisten
-> Scala: https://learnxinyminutes.com/docs/scala/
// REPL sessions can be saved
scala> :save /sites/repl-test.scala


javax.tools.JavaCompiler comp = javax.tools.ToolProvider.getSystemJavaCompiler();
CompilationTask c = comp.getTask(null,null, null, null, null, Collections.singletonList(new JavaSourceFromString(..., "class...");
Boolean success = c.call();

in ein jar reinkompilieren:
void compileWithJSR199() throws IOException {
    String cpath = "C2.jar";
    File clientJarFile = new File(cpath);
    File sourceFileToCompile = new File("C3.java");


    javax.tools.JavaCompiler javac = ToolProvider.getSystemJavaCompiler();
    DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();
    StandardJavaFileManager stdFileManager = javac.getStandardFileManager(diagnostics, null, null);

    List<File> files = new ArrayList<>();
    files.add(clientJarFile);

    stdFileManager.setLocation(StandardLocation.CLASS_PATH, files);

    Iterable<? extends JavaFileObject> sourceFiles = stdFileManager.getJavaFileObjects(sourceFileToCompile);

    if (!javac.getTask(null, stdFileManager, diagnostics, null, null, sourceFiles).call()) {
        throw new AssertionError("compilation failed");
    }
}
-> geht so nicht, jar muss man selber zsammpacken

generierte klassen in ein jar zsammpacken: https://stackoverflow.com/questions/1281229/how-to-use-jaroutputstream-to-create-a-jar-file

sind NACH dem let die let variablen wieder weg? sollte so sein -> test schreiben
-> falls nicht: waere durch naechsten punkt erledigt

der interpreter sollte haveNumbers haben, der scanner haveDouble und haveLong
-> enumwert HAVE_NUMBERS zusaetzlich, have methoden geeignet verteilen

closures NICHT dynamisches global env
-> ist doch kein problem, interpretiert gehts, und kompiliert: zur runtime sind die globals eh alle da

subOp auf asDouble umstellen

:java sollte filename aus classname ableiten . -> /

asDouble sollte ggf. eine function dbl() aufrufen statt so viel inline
main von MurmelProgram refaktorn: main(new Test())
compareOp auf interpreter angleichen


script fuer den aufruf
-> default parameter
-> files oeffnen und dann von console lesen

defun kompilieren

statt --compile -> --to-java und --to-jar

:run braucht eigentlich keinen Parameter
-> :r

ArraySlice sollte von ConsCell erben, wg. FFI (funktion gibt ArraySlice zurueck)
ConsCell.car/cdr sollten nicht public sein, nur getter
-> car/cdr aus ConsCell weg, damit Vererbung auf ArraySlice passt
-> vielleicht iwie Sequence in die Hierarchie reinbringen?

CL hat die funktion null, Murmel hat not
-> doch wieder umbenamsen, null ist viel haeufiger sprechend als not

Parser Interface refactoren: aufteilen in FormProducer und Symboltable
-> compiler- und interpreter-methoden koennen entweder einen Parser oder symtab/formproducer uebernehmen
-> gibt aber eh schon ObjectReader und symboltable, muss man nur nutzen

Zeilennummern in die kommentare mit rein. was ist eigentliche das problem mit der zeilennummer des beginns einer form? auch fuer "missing ) started at..."

Anatomy of LISP hat einen reader ohne rekursion

der compiler soll generell '\n' schreiben, derzeit ists eine mischung

LispPrinter soll linesep in strings umsetzen, ggf. waehlbar, falls waehlbar -> dokumentieren

REPL muss teilw. noch linesep umsetzen

compiler varargs geht wsl nicht

erforschen, was der zeichensatz beim lesen und schreiben ist, und dokumentieren, moeglichst Java standard verwenden
-> in System.initializeSystemClass() werden die Properties line.separator, sun.stdout.encoding und sun.stderr.encoding ausgewertet
   -> System.out und err schreiben Strings und chars anhand dieser properties, output muesste also passen
-> gelesen wird von stdin byte fuer byte (bytes werden als int geliefert), bytes werden auf char gecastet, char ist unicode
   -> umstellen dass gelesene bytes in ein byte array gespeichert werden,
      und tokenToString wandelt dieses bytearray anschliessend mittels new String(b, Charset.getDefault())
      Charset.getDefault liefert das Charset aus property file.encoding

SExpReader liest bytes, das funktioniert so nicht mit StringReader(der liefert nicht bytes sondern unicode chars als ints)
-> umstellen auf new ByteArrayInputStream(StandardCharsets.UTF_8, "...")

charset als param fuer den scanner (null ist java default), programmcode sollte immer als utf-8 gelesen werden
-> param "charset" einbauen und bei Parsern auf utf8 setzen (StandardCharsets.UTF_8)
    -> ausser im REPL, weil dort kommt der Programmcode von der Konsole

AnyToUnixEol an diversen Stellen einhaengen, derzeit liest nur repl() richtig

nur im Repl den gleichen Parser fuer program und read verwenden, sonst getrennte mit passender EOL konvertierung und charset

bytes mit charsetdecoder nach strings wandeln, mit CodingErrorAction.REPORT erzeugt unlesbarer input eine exception:
https://www.baeldung.com/java-char-encoding

der compiler erzeugt einen (unicode-) string, der wird in ein file mit Charset.getDefault() geschrieben
-> in ein UTF-8 file schreiben
-> oder: compilexx returned einen string. koennte stattdessen einen writer uebernehmen

JSR223: evalScript will fuer den Code einen bytereader, bekommt von JMurmelScriptEngine aber Reader::read (das liefert nicht UTF-8 bytes)
StringReader::read liefert anscheinend bytes entsprechend file.encoding ?!?
-> es braucht wohl einen zus. SExpressionParser der java.io.Reader liest oder einen ReadSupplier der char liefert
-> ausserdem sollte LispReader fuer JSR233 Programme von einem Reader lesen, nicht bytes als file.encoding interpretieren

der reader zaehlt bytes fuer charpos, umlaute sind 2 bytes, deswegen stimmt charpos bei umlauten nicht
-> eigentlich sollten die ObjectReader alle char liefern, und SExpressionParser.token ist ein char array
-> ggf. zus. Konstruktor, der einen Java.io.Reader uebernimmt

files von der befehlszeile sind im environment des repl aber nicht in der history
-> man kanns zwar interpretieren, aber nicht kompilieren/ mit :run kompilieren und laufen lassen/ mit :l listen

kompilierte jars spucken das letzte result aus, wenns ungleich null ist
der interpreter (file an der befehlszeile) nur mit --result
-> interpreter sollte sich ohne --result so verhalten wie jars, und mit --result ergebnisse aller toplevel forms ausspucken

die konstanten fuer symbolnamen von murmelprogram nach compiler
-> doch nicht damits ein MurmelJavaProgram.getValue() geben kann

der compiler braucht forward deklarationen, der interpreter nicht

die basisklasse MurmelJavaProgram sollte besser MurmelRuntime heissen
-> im Code und in den Strings umbenamsen
-> doch nicht

das generierte getValue() sollte im default ein neues MurmelProgram.getValue aufrufen, das alle vordefinierten globals und primitives liefert
-> stattdessen enthaelt getValue() ein zweites switch mit builtins

(let ((nil 42)) nil)   sollte eig wg reserved word nicht gehen, geht aber in interpreter und compiler
(let ((t 42)) t)       sollte eig wg reserved word nicht gehen, geht aber im compiler
(let ((cons 42)) cons) geht, sollte das einen fehler wg. reserved geben?

(define t 42)          sollte eig wg reserved word nicht gehen, geht aber im compiler
(define nil 42)        sollte eig wg reserved word nicht gehen, geht aber im interpreter, NPE im compiler

muss der compiler auch reserved words handeln?
-> ja, s.o.

methode eval sollte eigentlich evalquote heissen

MurmelJavaProgram implements MurmelProgram
-> MurmelProgram verwenden
-> MurmelJavaProgram auf private oder Package umstellen geht nicht weil erzeugte Progamme das extenden

trace und untrace zum "debuggen", vgl. https://github.com/norvig/paip-lisp/blob/master/docs/chapter1.md

--java liest nicht von stdin
--trace=stats gibt nur stats der ersten exp aus

der reader gibt einen kommentarblock als gesondertes objekt
-> nein, --trace=stats schreibt auch die initialisierung mit "() -> -1"

--jar packt nur MurmelProgram.class, die lambdas MurmelProgram$1.class usw gehen verschuett

bei get-decoded-time fehlt der wochentag: ... jahr wochentag "Daylight saving time flag" timezone
timezone hat das falsche vorzeichen: oestlich von greenwich ists negativ
timezone ist ein double, sollte ein "a rational multiple of 1/3600 between -24 (inclusive) and 24 (inclusive)" sein
