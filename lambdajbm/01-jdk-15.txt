
D:\robert\Workspace.java\platform\lambdajbm>c:\Apps\Java\X64\jdk-15\bin\java -jar target\benchmarks.jar  -p prog=2,3,4 LambdaJBenchmark.evalFiveTimes
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/D:/robert/Workspace.java/platform/lambdajbm/target/benchmarks.jar) to field java.io.Cons
ole.cs
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.26
# VM version: JDK 15, OpenJDK 64-Bit Server VM, 15+36-1562
# VM invoker: c:\Apps\Java\X64\jdk-15\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.robertmayer.lambdaj.LambdaJBenchmark.evalFiveTimes
# Parameters: (prog = 2)

# Run progress: 0,00% complete, ETA 00:03:00
# Fork: 1 of 3
# Warmup Iteration   1: 1100941,651 ns/op
# Warmup Iteration   2: 732913,483 ns/op
# Warmup Iteration   3: 258561,961 ns/op
# Warmup Iteration   4: 195076,524 ns/op
# Warmup Iteration   5: 196084,337 ns/op
# Warmup Iteration   6: 194865,384 ns/op
# Warmup Iteration   7: 196874,520 ns/op
# Warmup Iteration   8: 195608,903 ns/op
# Warmup Iteration   9: 195160,263 ns/op
# Warmup Iteration  10: 194767,443 ns/op
Iteration   1: 193908,044 ns/op
Iteration   2: 195787,325 ns/op
Iteration   3: 195446,167 ns/op
Iteration   4: 197453,072 ns/op
Iteration   5: 200080,177 ns/op
Iteration   6: 199466,276 ns/op
Iteration   7: 201675,607 ns/op
Iteration   8: 198645,916 ns/op
Iteration   9: 199732,461 ns/op
Iteration  10: 200655,807 ns/op

# Run progress: 11,11% complete, ETA 00:02:52
# Fork: 2 of 3
# Warmup Iteration   1: 1247832,787 ns/op
# Warmup Iteration   2: 531510,394 ns/op
# Warmup Iteration   3: 273447,556 ns/op
# Warmup Iteration   4: 199673,416 ns/op
# Warmup Iteration   5: 227996,222 ns/op
# Warmup Iteration   6: 210143,014 ns/op
# Warmup Iteration   7: 210051,700 ns/op
# Warmup Iteration   8: 199707,380 ns/op
# Warmup Iteration   9: 192199,621 ns/op
# Warmup Iteration  10: 192936,086 ns/op
Iteration   1: 194675,325 ns/op
Iteration   2: 192562,883 ns/op
Iteration   3: 193476,891 ns/op
Iteration   4: 193329,643 ns/op
Iteration   5: 198108,899 ns/op
Iteration   6: 202286,960 ns/op
Iteration   7: 198720,552 ns/op
Iteration   8: 198838,481 ns/op
Iteration   9: 197399,166 ns/op
Iteration  10: 198643,965 ns/op

# Run progress: 22,22% complete, ETA 00:02:29
# Fork: 3 of 3
# Warmup Iteration   1: 865944,599 ns/op
# Warmup Iteration   2: 302031,811 ns/op
# Warmup Iteration   3: 288480,115 ns/op
# Warmup Iteration   4: 192578,849 ns/op
# Warmup Iteration   5: 191543,328 ns/op
# Warmup Iteration   6: 197810,162 ns/op
# Warmup Iteration   7: 228596,284 ns/op
# Warmup Iteration   8: 200647,231 ns/op
# Warmup Iteration   9: 191659,721 ns/op
# Warmup Iteration  10: 190967,549 ns/op
Iteration   1: 191125,127 ns/op
Iteration   2: 190009,407 ns/op
Iteration   3: 190995,981 ns/op
Iteration   4: 194001,968 ns/op
Iteration   5: 194662,052 ns/op
Iteration   6: 194911,543 ns/op
Iteration   7: 194528,410 ns/op
Iteration   8: 195461,794 ns/op
Iteration   9: 195561,236 ns/op
Iteration  10: 194767,875 ns/op


Result "com.robertmayer.lambdaj.LambdaJBenchmark.evalFiveTimes":
  196230,634 ±(99.9%) 2148,869 ns/op [Average]
  (min, avg, max) = (190009,407, 196230,634, 202286,960), stdev = 3216,327
  CI (99.9%): [194081,764, 198379,503] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 15, OpenJDK 64-Bit Server VM, 15+36-1562
# VM invoker: c:\Apps\Java\X64\jdk-15\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.robertmayer.lambdaj.LambdaJBenchmark.evalFiveTimes
# Parameters: (prog = 3)

# Run progress: 33,33% complete, ETA 00:02:09
# Fork: 1 of 3
# Warmup Iteration   1: 2032501,922 ns/op
# Warmup Iteration   2: 888015,290 ns/op
# Warmup Iteration   3: 1834574,490 ns/op
# Warmup Iteration   4: 685888,683 ns/op
# Warmup Iteration   5: 692329,669 ns/op
# Warmup Iteration   6: 684701,596 ns/op
# Warmup Iteration   7: 822526,266 ns/op
# Warmup Iteration   8: 648467,419 ns/op
# Warmup Iteration   9: 647408,430 ns/op
# Warmup Iteration  10: 665567,815 ns/op
Iteration   1: 683880,137 ns/op
Iteration   2: 662280,636 ns/op
Iteration   3: 637839,704 ns/op
Iteration   4: 638757,994 ns/op
Iteration   5: 637791,798 ns/op
Iteration   6: 635602,063 ns/op
Iteration   7: 639308,277 ns/op
Iteration   8: 634853,139 ns/op
Iteration   9: 635445,407 ns/op
Iteration  10: 633154,569 ns/op

# Run progress: 44,44% complete, ETA 00:01:48
# Fork: 2 of 3
# Warmup Iteration   1: 2781340,929 ns/op
# Warmup Iteration   2: 956754,670 ns/op
# Warmup Iteration   3: 1375286,479 ns/op
# Warmup Iteration   4: 641933,168 ns/op
# Warmup Iteration   5: 646000,499 ns/op
# Warmup Iteration   6: 645509,711 ns/op
# Warmup Iteration   7: 661396,369 ns/op
# Warmup Iteration   8: 636375,666 ns/op
# Warmup Iteration   9: 641980,244 ns/op
# Warmup Iteration  10: 639596,918 ns/op
Iteration   1: 639014,717 ns/op
Iteration   2: 637650,474 ns/op
Iteration   3: 636404,349 ns/op
Iteration   4: 638391,486 ns/op
Iteration   5: 639188,598 ns/op
Iteration   6: 636460,834 ns/op
Iteration   7: 637462,035 ns/op
Iteration   8: 638620,893 ns/op
Iteration   9: 639103,304 ns/op
Iteration  10: 635005,648 ns/op

# Run progress: 55,56% complete, ETA 00:01:26
# Fork: 3 of 3
# Warmup Iteration   1: 6928305,127 ns/op
# Warmup Iteration   2: 944089,610 ns/op
# Warmup Iteration   3: 1794668,199 ns/op
# Warmup Iteration   4: 666709,941 ns/op
# Warmup Iteration   5: 658720,193 ns/op
# Warmup Iteration   6: 665696,122 ns/op
# Warmup Iteration   7: 646827,667 ns/op
# Warmup Iteration   8: 645881,948 ns/op
# Warmup Iteration   9: 646351,381 ns/op
# Warmup Iteration  10: 650080,596 ns/op
Iteration   1: 646334,779 ns/op
Iteration   2: 645642,805 ns/op
Iteration   3: 649141,257 ns/op
Iteration   4: 649507,057 ns/op
Iteration   5: 661493,445 ns/op
Iteration   6: 648994,508 ns/op
Iteration   7: 645104,683 ns/op
Iteration   8: 646374,398 ns/op
Iteration   9: 645820,525 ns/op
Iteration  10: 648951,742 ns/op


Result "com.robertmayer.lambdaj.LambdaJBenchmark.evalFiveTimes":
  643452,709 ±(99.9%) 7048,871 ns/op [Average]
  (min, avg, max) = (633154,569, 643452,709, 683880,137), stdev = 10550,419
  CI (99.9%): [636403,837, 650501,580] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 15, OpenJDK 64-Bit Server VM, 15+36-1562
# VM invoker: c:\Apps\Java\X64\jdk-15\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.robertmayer.lambdaj.LambdaJBenchmark.evalFiveTimes
# Parameters: (prog = 4)

# Run progress: 66,67% complete, ETA 00:01:04
# Fork: 1 of 3
# Warmup Iteration   1: 11466258,913 ns/op
# Warmup Iteration   2: 4178159,409 ns/op
# Warmup Iteration   3: 3274237,718 ns/op
# Warmup Iteration   4: 2154533,182 ns/op
# Warmup Iteration   5: 3905596,752 ns/op
# Warmup Iteration   6: 2199942,996 ns/op
# Warmup Iteration   7: 1745665,326 ns/op
# Warmup Iteration   8: 1741496,819 ns/op
# Warmup Iteration   9: 1744501,753 ns/op
# Warmup Iteration  10: 1734315,991 ns/op
Iteration   1: 1740159,903 ns/op
Iteration   2: 1749051,361 ns/op
Iteration   3: 1728899,401 ns/op
Iteration   4: 1761359,445 ns/op
Iteration   5: 1727689,620 ns/op
Iteration   6: 1722116,883 ns/op
Iteration   7: 1725340,657 ns/op
Iteration   8: 1727515,200 ns/op
Iteration   9: 1730064,864 ns/op
Iteration  10: 1723194,758 ns/op

# Run progress: 77,78% complete, ETA 00:00:43
# Fork: 2 of 3
# Warmup Iteration   1: 18144671,182 ns/op
# Warmup Iteration   2: 5028966,480 ns/op
# Warmup Iteration   3: 3168053,705 ns/op
# Warmup Iteration   4: 2365944,868 ns/op
# Warmup Iteration   5: 2989962,213 ns/op
# Warmup Iteration   6: 5166316,854 ns/op
# Warmup Iteration   7: 2422799,654 ns/op
# Warmup Iteration   8: 2026403,317 ns/op
# Warmup Iteration   9: 1823718,087 ns/op
# Warmup Iteration  10: 1849477,184 ns/op
Iteration   1: 1818323,478 ns/op
Iteration   2: 1814687,029 ns/op
Iteration   3: 1818436,015 ns/op
Iteration   4: 1887987,749 ns/op
Iteration   5: 1797996,288 ns/op
Iteration   6: 1814054,330 ns/op
Iteration   7: 1796246,272 ns/op
Iteration   8: 1798425,442 ns/op
Iteration   9: 1797050,710 ns/op
Iteration  10: 1795049,687 ns/op

# Run progress: 88,89% complete, ETA 00:00:21
# Fork: 3 of 3
# Warmup Iteration   1: 16756539,338 ns/op
# Warmup Iteration   2: 4295477,468 ns/op
# Warmup Iteration   3: 3179640,086 ns/op
# Warmup Iteration   4: 2292541,579 ns/op
# Warmup Iteration   5: 2524089,820 ns/op
# Warmup Iteration   6: 2557471,938 ns/op
# Warmup Iteration   7: 2435198,243 ns/op
# Warmup Iteration   8: 1982002,213 ns/op
# Warmup Iteration   9: 1995918,617 ns/op
# Warmup Iteration  10: 1806116,525 ns/op
Iteration   1: 1810813,638 ns/op
Iteration   2: 1801523,467 ns/op
Iteration   3: 1874456,810 ns/op
Iteration   4: 1797438,902 ns/op
Iteration   5: 1798006,739 ns/op
Iteration   6: 1793987,492 ns/op
Iteration   7: 1794478,198 ns/op
Iteration   8: 1793390,590 ns/op
Iteration   9: 1792510,350 ns/op
Iteration  10: 1804237,077 ns/op


Result "com.robertmayer.lambdaj.LambdaJBenchmark.evalFiveTimes":
  1784483,078 ±(99.9%) 28604,237 ns/op [Average]
  (min, avg, max) = (1722116,883, 1784483,078, 1887987,749), stdev = 42813,479
  CI (99.9%): [1755878,841, 1813087,316] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       (prog)  Mode  Cnt        Score       Error  Units
LambdaJBenchmark.evalFiveTimes       2  avgt   30   196230,634 ±  2148,869  ns/op
LambdaJBenchmark.evalFiveTimes       3  avgt   30   643452,709 ±  7048,871  ns/op
LambdaJBenchmark.evalFiveTimes       4  avgt   30  1784483,078 ± 28604,237  ns/op

D:\robert\Workspace.java\platform\lambdajbm>