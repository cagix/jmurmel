Usage:

java -jar jmurmel.jar <commandline flags>... <source files>... '--' args-for-program

Commandline flags are:

Misc flags:

-- ...............  '--' must be used to indicate:
                    commandline arguments after this will be passed
                    to the program

--version ........  Show version and exit
--help ...........  Show this message and exit
--help-features ..  Show advanced commandline flags to disable various
                    Murmel language elements (interpreter only)
--libdir <dir> ...  (load filespec) also searches in this directory,
                    default is the directory containing jmurmel.jar.
--verbose ........  List files given on the commandline as they are interpreted.

--java ...........  Compile input files to Java source 'MurmelProgram.java'
--jar ............  Compile input files to jarfile 'a.jar' containing
                    the class MurmelProgram. The generated jar needs
                    jmurmel.jar in the same directory to run.
--run ............  Compile and run
--class <name> ...  Use 'name' instead of 'MurmelProgram' as the classname
                    in generated .java- or .jar files
--outdir <dir> ...  Save .java or .jar files to 'dir' instead of current dir

--result .........  Print the result of the last form.
--tty ............  By default JMurmel will enter REPL only if there
                    are no filenames given on the commandline and
                    stdin is a tty.
                    --tty will make JMurmel enter REPL anyways,
                    i.e. print prompt and results, support :commands and
                    continue after runtime errors.
                    Useful e.g. for Emacs' (run-lisp).
--repl ...........  Same as --tty but terminate after runtime errors.

Flags for REPL:
--echo ...........  Echo all input while reading
--trace=stats ....  Print stack and memory stats after each form
--trace=envstats .  Print stack, memory and environment stats after each form
--trace=eval .....  Print internal interpreter info during executing programs
--trace=env ......  Print more internal interpreter info executing programs
--trace ..........  Print lots of internal interpreter info during
                    reading/ parsing/ executing programs

Feature flags:

--no-ffi ......  no function '::'
--no-extra ....  no special forms eval, if, define, defun, defmacro,
                 let, let*, letrec, progn, setq, rplaca, rplacd,
                 load, require, provide, declaim
                 no primitive functions trace, untrace, macroexpand-1
--no-number ...  no number support
--no-string ...  no string support
--no-io .......  no primitive functions read, write, writeln, lnwrite,
--no-util .....  no primitive functions consp, symbolp, listp, null, assoc,
                 format, format-locale
                 no time related primitives

--min+ ........  turn off all above features, leaving a Lisp
                 with 10 special forms and primitives:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   the special forms quote, lambda, cond, labels
                   the primitive functions atom, eq, cons, car, cdr, apply
                   the symbols nil, t

--no-nil ......  don't predefine symbol nil (hint: use '()' instead)
--no-t ........  don't predefine symbol t (hint: use '(quote t)' instead)
--no-apply ....  no function 'apply'
--no-labels ...  no special form 'labels' (hint: use Y-combinator instead)

--min .........  turn off all above features, leaving a Lisp with
                 8 special forms and primitives:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   the special forms quote, lambda, cond
                   the primitive functions atom, eq, cons, car, cdr

--no-cons .....  no primitive functions cons/ car/ cdr
--no-cond .....  no special form 'cond'

--lambda+ .....  turn off pretty much everything except Lambda calculus,
                 leaving a Lisp with 4 special forms and primitives:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   the special form quote, lambda
                   the primitive functions atom, eq

--no-atom .....  no primitive function 'atom'
--no-eq .......  no primitive function 'eq'
--no-quote ....  no special form quote

--lambda ......  turns off yet even more stuff, leaving I guess
                 bare bones Lambda calculus:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   the special form lambda


--XX-dyn ......  Use dynamic environments instead of Murmel's
                 lexical closures with dynamic global environment.
                 WARNING: This flag is for experimentation purposes only
                          and may be removed in future versions.
                          Use at your own discretion.
                          Using --XX-dyn JMurmel will no longer implement Murmel
                          and your programs may silently compute different
                          results!