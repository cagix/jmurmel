Doch (noch) nicht:
==================

builder pattern:
withStdin(...)        // entweder einen char supplier oder einen ObjectReader
withStdout(...)       // entweder einen String consumer oder einen ObjectWriter
withCustomEnv(...)    // Parameter ist ein Supplier<ConsCell>, der erzeugt eine Liste mit (symbol . builtin)
                      // und wird in der Init Phase aufgerufen
withTrace(Tracer)     // z.B. System.err::println
withTty()             // Shortcut/ convenience: benutzt System in/out/err, kein Custom Env
obige methoden liefern ein Interface "LambdaJBuilder" OHNE interpret aber mit build()
build()               // bastelt alles zusammen und liefert ein Interface "LambdaJ" mit interpret(), withStdin(), withStdout()
interpret(...)        // entweder einen char supplier oder einen Parser, oder ein String?!


JMurmel> (list->simple-vector '(1 2 3))
==> #(1 2 3)
JMurmel> (apply vector '(1 2 3))
==> #(1 2 3)

-> list->simple-vector ist unnötig
   wenns constructor funktionen für die anderen vectortypen gäbe, wäre z.B. list->string auch unnötig


eine map builtinfunc->name damit printObj die funktionsnamen ausgeben kann?
zweite map fuer FFI funktionen s.u.?

Wenn ConsCell geeignet annotiert ist, sollte jaxb dann XML nach Lists parsen koennen? XML schreiben muesste supereinfach sein?!
-> es braucht viele annotations und public noarg constructors, zawos brauchma des

lisp write liefert als ergebnis den parameter
-> LambdaJ liefert (quote t)

Lambda erweitern, sodass es implizites currying wie in Lambda Calculus unterstuetzt wird?
vgl. https://old.reddit.com/r/learnlisp/comments/izq5fs/how_to_implement_basic_lambda_calculus_operators/g6kikqp/
(define xyzzy (lambda (a b c) (+ a b c)))
(xyzzy 1 2) ; liefert einen fehler, koennte aber ein closure mit a und b und code: (lambda (c) (+ a b c)) liefern

-> makeArgList muesste als ergebnis eine Liste mit 2 Listen liefern: das extenv mit den arguments + liste mit verbleibenden params
   -> wenns keine verbleibenden params gibt, wird die funktion ausgeführt, gibts verbleibende args,
      ist der returnwert ein lambda mit den verbleibenden params. 
-> nur sinnvoll bei lexical closures, weil sonst gingen ja die bereits gesetzten argumente verschuett 
  -> erst mal nicht, currying/ variadic functions, default arguments passen schlecht zusammen

continuations: loops gibts ja keine, ist eine continuation einfach der restliche parse tree? 
ist currentcc cdr(exp) (und das env bzw. closure) ?
-> es koennte eine special form current-continuation geben, angelehnt an lambda, current-continuation haette eine parameterliste,
   aber keinen stmt body. ergebnis von (current-continuation (a b c)) waere ein lambda (lambda (a b c) ...), ... steht fuer
   jene automatisch eingefuegten stmts, die auf den aufruf von current-continuation folgen. d.h. wenn jemand dieses lambda aufruft,
   gehts mit den stmts weiter, und die symbole a b c sind mit werten belegt im environment (d.h. closure) vorhanden.
   -> geht zunaechst aber nur innerhalb einer flachen liste stmts eines lambdas, nicht z.b. innerhalb des true zweigs einer if-clause.
      -> damit das auch geht, muesste man die stmts die der gesamten if clause folgen, auch ans lambda dranhaengen
         -> das waer moeglich, wenn man bei jedem rekursiven oder tailrekursiven aufruf von eval eine verkette liste mit cdr(exp)
            als parameter mitgibt, bei jedem aufruf wird die liste eins laenger. um dann das continuation lambda zu basteln,
            haengt man diese stmt liste an eine kopie von cdr(exp) dran. haette z.b. zur folge: wenn nur im true zweig call/cc
            aufgerufen wird, dann sind die parameter nach der if clause bei durchlauf durch true zweig vorhanden,
            beim durchlaufen des false zweigs nicht vorhanden.
         -> Aufrufe einer Continuation sind effektiv Endcalls
            Nein, sind sie nicht, wenn die gerufene Continuation einfach endet, entspricht das einem return.
            CPS waer ggf. moeglich und nicht so schwer?!?

print/ pprint/ princ/
-> die setzen parameter und rufen write, write kennt viele parameter zur formatierung, siehe
   http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm

Environment variable fuer default options
-> aufrufscript stattdessen

sollte format write aufrufen statt direkt zum lispwriter zu schreiben? write koennte erweitert werden, dass es *print-pretty* usw.
auswertet
-> nein, format ruft #printString, write ruft #printObj, format schreibt, was der user im formatstring spezifiziert
   write schreibt entsprechend allfaelliger globalen variablen/ argumenten

vielleicht doch eine option fuer eol, die interpreter UND compilierte programme auswerten? default ins kompilierte programm reinschreiben?
oder endlich filevariables, die wuerden auch ins kompilierte programm reingepatcht
-> oder so lassen, weil interpreter, compiler und kompilate die System property line.separator auswerten

in qq_expand_list statt 1-element listen cons(x, null)
optimize dahingehend erweitern (oder ändern?), dass nicht nur list sondern auch cons erkannt wird
-> ggf. können die patterns (list lhsX) nicht mehr auftreten, nur mehr (cons lhsX nil)

instanceof in tailcall(Object... und funcall(Object... bremst
-> CompilerGlobal könnte eine methode funcall bekommen, die wird emitted wenn das symbol in der car position einer form vorkommt
   funcall würde das ergebnis von instanceof cachen und zum richtigen funcall dispatchen
   -> und tailcall()
oder instanceof von MurmelFunction und CompilerPrimitive fuzzy cachen?
-> caching war langsamer

ist (eval (quote form)) dasselbe wie (progn form) bzw. form?
-> damit könnte der compiler ein eval wegoptimieren
-> SBCL machts anscheinend nicht



LambdaJString.value von String auf char[] umstellen?
-> wuerde ggf. builtins rund um java.lang.Character erleichtern
-> char ist 16 bit
-> Java11 speichert String.value nicht als char[] sondern byte[], diese Speicherersparnis waer dann verloren

-> LambdaJString gibts nicht mehr


In einer LISP Datei nach dem Ende einer Toplevel form koennten Daten stehen, die wuerden von read gelesen
-> Beispiel machen
LambdaJ> (write (read)) "Hello, World!"
"Hello, World!"
==> t

-> geht halt in der Form nur im interpreter



define sollte das aktuelle environment erweitern, nicht das globale
zusaetzlich define-global einfuehren (ist das dasselbe wie defconst? solange keine re-definition und kein set -> ja)
-> oder auch nicht: Scheme define != Old Lisp define



CL hat auch boolean:
* (describe 'boolean)
COMMON-LISP:BOOLEAN
  [symbol]

BOOLEAN names a type-specifier:
  Lambda-list: ()
  Expansion: (MEMBER T NIL)

-> bit sollte ggf. java.lang.byte sein statt boolean, Lisp boolean könnte Java boolean sein
   -> dann brauchen die bitoperationen kein ?: mehr, und JFFI könnte besser angebunden werden
-> oder weglassen, CLtL hat kein boolean

in CL nehmen provide und require stringdesignator (und ausserdem sinds funktionen)
-> in Murmel sinds special forms und nehmen nur string
   -> sollten wsl. special forms bleiben aber stringdesignator akzeptieren, d.h. string + symbol + character
-> besser so lassen. effektiv nehmen Murmel load und require nur stringliterale (weil load und require special forms sind und das argument nicht evaluieren)
   und bei stringliteralen macht eval oder nicht keinen unterschied, aber z.B. bei symbolen würd quoten oder nicht einen unterschied machen
