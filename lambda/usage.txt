Usage:

interactive:
java -jar lambdaj.jar [commandline arguments]*

non-interactive:
java -jar lambdaj.jar [commandline arguments]* < lisp-source.lisp

Commandline arguments are:

Misc:
--version .....  show version and exit
--help ........  show this message and exit

--repl ........  enter REPL even if the input isn't a tty,
                 i.e. print prompt and results and support :commands.
--echo ........  echo all input while reading
--trace=stats .  print stack and memory stats at end
--trace=eval ..  print internal interpreter info during executing programs
--trace=eval ..  print more internal interpreter info during executing programs
--trace .......  print lots of internal interpreter info during
                 reading/ parsing/ executing programs

Feature flags:

--dyn .........  use dynamic environments
--lex .........  use lexical environments, this is the default

--no-nil ......  don't predefine symbol nil (hint: use '()' instead)
--no-t ........  don't predefine symbol t (hint: use '(quote t)' instead)
--no-extra ....  no special form 'define' or 'if'
--no-double ...  no number support
--no-string ...  no string support
--no-io .......  no primitive functions read/ write/ writeln
--no-util .....  no primitive functions consp/ symbolp/ listp/ null?/ assoc/
                 string-format/ string-format-locale

--min+ ........  turn off all above features, leaving a Lisp with 10 primitives:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   the special form quote
                   atom, eq, cons, car, cdr, lambda, apply, cond, labels

--no-apply ....  no special form 'apply'
--no-labels ...  no special form 'labels' (hint: use Y-combinator instead)

--min .........  turn off all above features, leaving a Lisp with 8 special forms/ primitives:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   the special form quote
                   atom, eq, cons, car, cdr, lambda, cond

--no-cons .....  no primitive functions cons/ car/ cdr
--no-cond .....  no special form 'cond'

--lambda+ .....  turn off pretty much everything except Lambda calculus,
                 leaving a Lisp with 4 primitives:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   the special form quote
                   atom, eq, lambda

--no-atom .....  no primitive function 'atom'
--no-eq .......  no primitive function 'eq'
--no-quote ....  no special form quote

--lambda ......  turns off yet even more stuff, leaving I guess bare bones Lambda calculus:
                   S-expressions
                   symbols and cons-cells (i.e. lists)
                   function application
                   lambda